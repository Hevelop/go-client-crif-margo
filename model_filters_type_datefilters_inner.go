/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the FiltersTypeDatefiltersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FiltersTypeDatefiltersInner{}

// FiltersTypeDatefiltersInner struct for FiltersTypeDatefiltersInner
type FiltersTypeDatefiltersInner struct {
	FilterId *string `json:"filterId,omitempty"`
	Value *DateFilterType `json:"value,omitempty"`
}

// NewFiltersTypeDatefiltersInner instantiates a new FiltersTypeDatefiltersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiltersTypeDatefiltersInner() *FiltersTypeDatefiltersInner {
	this := FiltersTypeDatefiltersInner{}
	return &this
}

// NewFiltersTypeDatefiltersInnerWithDefaults instantiates a new FiltersTypeDatefiltersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiltersTypeDatefiltersInnerWithDefaults() *FiltersTypeDatefiltersInner {
	this := FiltersTypeDatefiltersInner{}
	return &this
}

// GetFilterId returns the FilterId field value if set, zero value otherwise.
func (o *FiltersTypeDatefiltersInner) GetFilterId() string {
	if o == nil || IsNil(o.FilterId) {
		var ret string
		return ret
	}
	return *o.FilterId
}

// GetFilterIdOk returns a tuple with the FilterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersTypeDatefiltersInner) GetFilterIdOk() (*string, bool) {
	if o == nil || IsNil(o.FilterId) {
		return nil, false
	}
	return o.FilterId, true
}

// HasFilterId returns a boolean if a field has been set.
func (o *FiltersTypeDatefiltersInner) HasFilterId() bool {
	if o != nil && !IsNil(o.FilterId) {
		return true
	}

	return false
}

// SetFilterId gets a reference to the given string and assigns it to the FilterId field.
func (o *FiltersTypeDatefiltersInner) SetFilterId(v string) {
	o.FilterId = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FiltersTypeDatefiltersInner) GetValue() DateFilterType {
	if o == nil || IsNil(o.Value) {
		var ret DateFilterType
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersTypeDatefiltersInner) GetValueOk() (*DateFilterType, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FiltersTypeDatefiltersInner) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given DateFilterType and assigns it to the Value field.
func (o *FiltersTypeDatefiltersInner) SetValue(v DateFilterType) {
	o.Value = &v
}

func (o FiltersTypeDatefiltersInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FiltersTypeDatefiltersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterId) {
		toSerialize["filterId"] = o.FilterId
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableFiltersTypeDatefiltersInner struct {
	value *FiltersTypeDatefiltersInner
	isSet bool
}

func (v NullableFiltersTypeDatefiltersInner) Get() *FiltersTypeDatefiltersInner {
	return v.value
}

func (v *NullableFiltersTypeDatefiltersInner) Set(val *FiltersTypeDatefiltersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFiltersTypeDatefiltersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFiltersTypeDatefiltersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiltersTypeDatefiltersInner(val *FiltersTypeDatefiltersInner) *NullableFiltersTypeDatefiltersInner {
	return &NullableFiltersTypeDatefiltersInner{value: val, isSet: true}
}

func (v NullableFiltersTypeDatefiltersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiltersTypeDatefiltersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


