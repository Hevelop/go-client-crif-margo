/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the ResponseErrorType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseErrorType{}

// ResponseErrorType struct for ResponseErrorType
type ResponseErrorType struct {
	Fault *FaultType `json:"fault,omitempty"`
}

// NewResponseErrorType instantiates a new ResponseErrorType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseErrorType() *ResponseErrorType {
	this := ResponseErrorType{}
	return &this
}

// NewResponseErrorTypeWithDefaults instantiates a new ResponseErrorType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseErrorTypeWithDefaults() *ResponseErrorType {
	this := ResponseErrorType{}
	return &this
}

// GetFault returns the Fault field value if set, zero value otherwise.
func (o *ResponseErrorType) GetFault() FaultType {
	if o == nil || IsNil(o.Fault) {
		var ret FaultType
		return ret
	}
	return *o.Fault
}

// GetFaultOk returns a tuple with the Fault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseErrorType) GetFaultOk() (*FaultType, bool) {
	if o == nil || IsNil(o.Fault) {
		return nil, false
	}
	return o.Fault, true
}

// HasFault returns a boolean if a field has been set.
func (o *ResponseErrorType) HasFault() bool {
	if o != nil && !IsNil(o.Fault) {
		return true
	}

	return false
}

// SetFault gets a reference to the given FaultType and assigns it to the Fault field.
func (o *ResponseErrorType) SetFault(v FaultType) {
	o.Fault = &v
}

func (o ResponseErrorType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseErrorType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fault) {
		toSerialize["fault"] = o.Fault
	}
	return toSerialize, nil
}

type NullableResponseErrorType struct {
	value *ResponseErrorType
	isSet bool
}

func (v NullableResponseErrorType) Get() *ResponseErrorType {
	return v.value
}

func (v *NullableResponseErrorType) Set(val *ResponseErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseErrorType(val *ResponseErrorType) *NullableResponseErrorType {
	return &NullableResponseErrorType{value: val, isSet: true}
}

func (v NullableResponseErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


