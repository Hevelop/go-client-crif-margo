/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the UserArrayType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserArrayType{}

// UserArrayType Array of User
type UserArrayType struct {
	Content []UserType `json:"content,omitempty"`
}

// NewUserArrayType instantiates a new UserArrayType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserArrayType() *UserArrayType {
	this := UserArrayType{}
	return &this
}

// NewUserArrayTypeWithDefaults instantiates a new UserArrayType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserArrayTypeWithDefaults() *UserArrayType {
	this := UserArrayType{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *UserArrayType) GetContent() []UserType {
	if o == nil || IsNil(o.Content) {
		var ret []UserType
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserArrayType) GetContentOk() ([]UserType, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *UserArrayType) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given []UserType and assigns it to the Content field.
func (o *UserArrayType) SetContent(v []UserType) {
	o.Content = v
}

func (o UserArrayType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserArrayType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

type NullableUserArrayType struct {
	value *UserArrayType
	isSet bool
}

func (v NullableUserArrayType) Get() *UserArrayType {
	return v.value
}

func (v *NullableUserArrayType) Set(val *UserArrayType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserArrayType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserArrayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserArrayType(val *UserArrayType) *NullableUserArrayType {
	return &NullableUserArrayType{value: val, isSet: true}
}

func (v NullableUserArrayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserArrayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


