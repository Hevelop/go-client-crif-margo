/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the SearchType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchType{}

// SearchType struct for SearchType
type SearchType struct {
	FreeText *string `json:"freeText,omitempty"`
	IgnoredPortfolios []string `json:"ignoredPortfolios,omitempty"`
	Filters *FiltersType `json:"filters,omitempty"`
	Content *SearchTypeContent `json:"content,omitempty"`
	// It defines the output sorting. Must be either ASC or DESC and the format must be: `fieldId,asc` or `fieldId,desc` where fieldId identifies the field for sorting.
	Sort *string `json:"sort,omitempty"`
	// It manages the number of calls and it governs pagination. continueToken is provided after first call by Margo and after it must be insert in the body. The continueToken changes after each call and it must refresh in the body.
	ContinueToken *string `json:"continueToken,omitempty"`
	// Zero-based number of the page to obtain. It must be higher than 0 and â‰¤ than 100
	Size *float32 `json:"size,omitempty"`
}

// NewSearchType instantiates a new SearchType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchType() *SearchType {
	this := SearchType{}
	return &this
}

// NewSearchTypeWithDefaults instantiates a new SearchType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchTypeWithDefaults() *SearchType {
	this := SearchType{}
	return &this
}

// GetFreeText returns the FreeText field value if set, zero value otherwise.
func (o *SearchType) GetFreeText() string {
	if o == nil || IsNil(o.FreeText) {
		var ret string
		return ret
	}
	return *o.FreeText
}

// GetFreeTextOk returns a tuple with the FreeText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchType) GetFreeTextOk() (*string, bool) {
	if o == nil || IsNil(o.FreeText) {
		return nil, false
	}
	return o.FreeText, true
}

// HasFreeText returns a boolean if a field has been set.
func (o *SearchType) HasFreeText() bool {
	if o != nil && !IsNil(o.FreeText) {
		return true
	}

	return false
}

// SetFreeText gets a reference to the given string and assigns it to the FreeText field.
func (o *SearchType) SetFreeText(v string) {
	o.FreeText = &v
}

// GetIgnoredPortfolios returns the IgnoredPortfolios field value if set, zero value otherwise.
func (o *SearchType) GetIgnoredPortfolios() []string {
	if o == nil || IsNil(o.IgnoredPortfolios) {
		var ret []string
		return ret
	}
	return o.IgnoredPortfolios
}

// GetIgnoredPortfoliosOk returns a tuple with the IgnoredPortfolios field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchType) GetIgnoredPortfoliosOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredPortfolios) {
		return nil, false
	}
	return o.IgnoredPortfolios, true
}

// HasIgnoredPortfolios returns a boolean if a field has been set.
func (o *SearchType) HasIgnoredPortfolios() bool {
	if o != nil && !IsNil(o.IgnoredPortfolios) {
		return true
	}

	return false
}

// SetIgnoredPortfolios gets a reference to the given []string and assigns it to the IgnoredPortfolios field.
func (o *SearchType) SetIgnoredPortfolios(v []string) {
	o.IgnoredPortfolios = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *SearchType) GetFilters() FiltersType {
	if o == nil || IsNil(o.Filters) {
		var ret FiltersType
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchType) GetFiltersOk() (*FiltersType, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *SearchType) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given FiltersType and assigns it to the Filters field.
func (o *SearchType) SetFilters(v FiltersType) {
	o.Filters = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *SearchType) GetContent() SearchTypeContent {
	if o == nil || IsNil(o.Content) {
		var ret SearchTypeContent
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchType) GetContentOk() (*SearchTypeContent, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *SearchType) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given SearchTypeContent and assigns it to the Content field.
func (o *SearchType) SetContent(v SearchTypeContent) {
	o.Content = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *SearchType) GetSort() string {
	if o == nil || IsNil(o.Sort) {
		var ret string
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchType) GetSortOk() (*string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *SearchType) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given string and assigns it to the Sort field.
func (o *SearchType) SetSort(v string) {
	o.Sort = &v
}

// GetContinueToken returns the ContinueToken field value if set, zero value otherwise.
func (o *SearchType) GetContinueToken() string {
	if o == nil || IsNil(o.ContinueToken) {
		var ret string
		return ret
	}
	return *o.ContinueToken
}

// GetContinueTokenOk returns a tuple with the ContinueToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchType) GetContinueTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ContinueToken) {
		return nil, false
	}
	return o.ContinueToken, true
}

// HasContinueToken returns a boolean if a field has been set.
func (o *SearchType) HasContinueToken() bool {
	if o != nil && !IsNil(o.ContinueToken) {
		return true
	}

	return false
}

// SetContinueToken gets a reference to the given string and assigns it to the ContinueToken field.
func (o *SearchType) SetContinueToken(v string) {
	o.ContinueToken = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *SearchType) GetSize() float32 {
	if o == nil || IsNil(o.Size) {
		var ret float32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchType) GetSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *SearchType) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given float32 and assigns it to the Size field.
func (o *SearchType) SetSize(v float32) {
	o.Size = &v
}

func (o SearchType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FreeText) {
		toSerialize["freeText"] = o.FreeText
	}
	if !IsNil(o.IgnoredPortfolios) {
		toSerialize["ignoredPortfolios"] = o.IgnoredPortfolios
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.ContinueToken) {
		toSerialize["continueToken"] = o.ContinueToken
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableSearchType struct {
	value *SearchType
	isSet bool
}

func (v NullableSearchType) Get() *SearchType {
	return v.value
}

func (v *NullableSearchType) Set(val *SearchType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchType(val *SearchType) *NullableSearchType {
	return &NullableSearchType{value: val, isSet: true}
}

func (v NullableSearchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


