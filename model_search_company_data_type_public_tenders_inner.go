/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the SearchCompanyDataTypePublicTendersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCompanyDataTypePublicTendersInner{}

// SearchCompanyDataTypePublicTendersInner struct for SearchCompanyDataTypePublicTendersInner
type SearchCompanyDataTypePublicTendersInner struct {
	Year *string `json:"year,omitempty"`
	Applied *float32 `json:"applied,omitempty"`
	Won *float32 `json:"won,omitempty"`
	Value *float32 `json:"value,omitempty"`
}

// NewSearchCompanyDataTypePublicTendersInner instantiates a new SearchCompanyDataTypePublicTendersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCompanyDataTypePublicTendersInner() *SearchCompanyDataTypePublicTendersInner {
	this := SearchCompanyDataTypePublicTendersInner{}
	return &this
}

// NewSearchCompanyDataTypePublicTendersInnerWithDefaults instantiates a new SearchCompanyDataTypePublicTendersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCompanyDataTypePublicTendersInnerWithDefaults() *SearchCompanyDataTypePublicTendersInner {
	this := SearchCompanyDataTypePublicTendersInner{}
	return &this
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *SearchCompanyDataTypePublicTendersInner) GetYear() string {
	if o == nil || IsNil(o.Year) {
		var ret string
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypePublicTendersInner) GetYearOk() (*string, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *SearchCompanyDataTypePublicTendersInner) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given string and assigns it to the Year field.
func (o *SearchCompanyDataTypePublicTendersInner) SetYear(v string) {
	o.Year = &v
}

// GetApplied returns the Applied field value if set, zero value otherwise.
func (o *SearchCompanyDataTypePublicTendersInner) GetApplied() float32 {
	if o == nil || IsNil(o.Applied) {
		var ret float32
		return ret
	}
	return *o.Applied
}

// GetAppliedOk returns a tuple with the Applied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypePublicTendersInner) GetAppliedOk() (*float32, bool) {
	if o == nil || IsNil(o.Applied) {
		return nil, false
	}
	return o.Applied, true
}

// HasApplied returns a boolean if a field has been set.
func (o *SearchCompanyDataTypePublicTendersInner) HasApplied() bool {
	if o != nil && !IsNil(o.Applied) {
		return true
	}

	return false
}

// SetApplied gets a reference to the given float32 and assigns it to the Applied field.
func (o *SearchCompanyDataTypePublicTendersInner) SetApplied(v float32) {
	o.Applied = &v
}

// GetWon returns the Won field value if set, zero value otherwise.
func (o *SearchCompanyDataTypePublicTendersInner) GetWon() float32 {
	if o == nil || IsNil(o.Won) {
		var ret float32
		return ret
	}
	return *o.Won
}

// GetWonOk returns a tuple with the Won field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypePublicTendersInner) GetWonOk() (*float32, bool) {
	if o == nil || IsNil(o.Won) {
		return nil, false
	}
	return o.Won, true
}

// HasWon returns a boolean if a field has been set.
func (o *SearchCompanyDataTypePublicTendersInner) HasWon() bool {
	if o != nil && !IsNil(o.Won) {
		return true
	}

	return false
}

// SetWon gets a reference to the given float32 and assigns it to the Won field.
func (o *SearchCompanyDataTypePublicTendersInner) SetWon(v float32) {
	o.Won = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SearchCompanyDataTypePublicTendersInner) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypePublicTendersInner) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SearchCompanyDataTypePublicTendersInner) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *SearchCompanyDataTypePublicTendersInner) SetValue(v float32) {
	o.Value = &v
}

func (o SearchCompanyDataTypePublicTendersInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCompanyDataTypePublicTendersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !IsNil(o.Applied) {
		toSerialize["applied"] = o.Applied
	}
	if !IsNil(o.Won) {
		toSerialize["won"] = o.Won
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableSearchCompanyDataTypePublicTendersInner struct {
	value *SearchCompanyDataTypePublicTendersInner
	isSet bool
}

func (v NullableSearchCompanyDataTypePublicTendersInner) Get() *SearchCompanyDataTypePublicTendersInner {
	return v.value
}

func (v *NullableSearchCompanyDataTypePublicTendersInner) Set(val *SearchCompanyDataTypePublicTendersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCompanyDataTypePublicTendersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCompanyDataTypePublicTendersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCompanyDataTypePublicTendersInner(val *SearchCompanyDataTypePublicTendersInner) *NullableSearchCompanyDataTypePublicTendersInner {
	return &NullableSearchCompanyDataTypePublicTendersInner{value: val, isSet: true}
}

func (v NullableSearchCompanyDataTypePublicTendersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCompanyDataTypePublicTendersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


