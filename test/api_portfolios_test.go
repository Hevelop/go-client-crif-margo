/*
Global Marketing Solution

Testing PortfoliosAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package crifmargo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Hevelop/go-client-crif-margo"
)

func Test_crifmargo_PortfoliosAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PortfoliosAPIService DeletePortfolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portfolioId string

		httpRes, err := apiClient.PortfoliosAPI.DeletePortfolio(context.Background(), portfolioId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortfoliosAPIService DeleteSharingPortfolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portfolioId string

		httpRes, err := apiClient.PortfoliosAPI.DeleteSharingPortfolio(context.Background(), portfolioId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortfoliosAPIService GetPortfolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portfolioId string

		resp, httpRes, err := apiClient.PortfoliosAPI.GetPortfolio(context.Background(), portfolioId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortfoliosAPIService GetPortfolios", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortfoliosAPI.GetPortfolios(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortfoliosAPIService PortfolioSharesDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portfolioId string

		httpRes, err := apiClient.PortfoliosAPI.PortfolioSharesDelete(context.Background(), portfolioId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortfoliosAPIService PortfolioSharingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portfolioId string

		resp, httpRes, err := apiClient.PortfoliosAPI.PortfolioSharingList(context.Background(), portfolioId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortfoliosAPIService PostAddPortfolioCompanies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portfolioId string

		resp, httpRes, err := apiClient.PortfoliosAPI.PostAddPortfolioCompanies(context.Background(), portfolioId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortfoliosAPIService PostDeletePortfolioCompanies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portfolioId string

		resp, httpRes, err := apiClient.PortfoliosAPI.PostDeletePortfolioCompanies(context.Background(), portfolioId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortfoliosAPIService PostPortfolioDownload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portfolioId string

		resp, httpRes, err := apiClient.PortfoliosAPI.PostPortfolioDownload(context.Background(), portfolioId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortfoliosAPIService PostPortfolios", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortfoliosAPI.PostPortfolios(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortfoliosAPIService PostSimilarity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portfolioId string

		resp, httpRes, err := apiClient.PortfoliosAPI.PostSimilarity(context.Background(), portfolioId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortfoliosAPIService PostUpdatePortfolioCompanies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portfolioId string

		resp, httpRes, err := apiClient.PortfoliosAPI.PostUpdatePortfolioCompanies(context.Background(), portfolioId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortfoliosAPIService SharePortfolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portfolioId string

		httpRes, err := apiClient.PortfoliosAPI.SharePortfolio(context.Background(), portfolioId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
