/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the SearchCompanyDataTypeSeasonality type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCompanyDataTypeSeasonality{}

// SearchCompanyDataTypeSeasonality struct for SearchCompanyDataTypeSeasonality
type SearchCompanyDataTypeSeasonality struct {
	Winter *SearchCompanyDataTypeSeasonalityWinter `json:"winter,omitempty"`
	Spring *SearchCompanyDataTypeSeasonalityWinter `json:"spring,omitempty"`
	Summer *SearchCompanyDataTypeSeasonalityWinter `json:"summer,omitempty"`
	Autumn *SearchCompanyDataTypeSeasonalityWinter `json:"autumn,omitempty"`
}

// NewSearchCompanyDataTypeSeasonality instantiates a new SearchCompanyDataTypeSeasonality object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCompanyDataTypeSeasonality() *SearchCompanyDataTypeSeasonality {
	this := SearchCompanyDataTypeSeasonality{}
	return &this
}

// NewSearchCompanyDataTypeSeasonalityWithDefaults instantiates a new SearchCompanyDataTypeSeasonality object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCompanyDataTypeSeasonalityWithDefaults() *SearchCompanyDataTypeSeasonality {
	this := SearchCompanyDataTypeSeasonality{}
	return &this
}

// GetWinter returns the Winter field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeSeasonality) GetWinter() SearchCompanyDataTypeSeasonalityWinter {
	if o == nil || IsNil(o.Winter) {
		var ret SearchCompanyDataTypeSeasonalityWinter
		return ret
	}
	return *o.Winter
}

// GetWinterOk returns a tuple with the Winter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeSeasonality) GetWinterOk() (*SearchCompanyDataTypeSeasonalityWinter, bool) {
	if o == nil || IsNil(o.Winter) {
		return nil, false
	}
	return o.Winter, true
}

// HasWinter returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeSeasonality) HasWinter() bool {
	if o != nil && !IsNil(o.Winter) {
		return true
	}

	return false
}

// SetWinter gets a reference to the given SearchCompanyDataTypeSeasonalityWinter and assigns it to the Winter field.
func (o *SearchCompanyDataTypeSeasonality) SetWinter(v SearchCompanyDataTypeSeasonalityWinter) {
	o.Winter = &v
}

// GetSpring returns the Spring field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeSeasonality) GetSpring() SearchCompanyDataTypeSeasonalityWinter {
	if o == nil || IsNil(o.Spring) {
		var ret SearchCompanyDataTypeSeasonalityWinter
		return ret
	}
	return *o.Spring
}

// GetSpringOk returns a tuple with the Spring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeSeasonality) GetSpringOk() (*SearchCompanyDataTypeSeasonalityWinter, bool) {
	if o == nil || IsNil(o.Spring) {
		return nil, false
	}
	return o.Spring, true
}

// HasSpring returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeSeasonality) HasSpring() bool {
	if o != nil && !IsNil(o.Spring) {
		return true
	}

	return false
}

// SetSpring gets a reference to the given SearchCompanyDataTypeSeasonalityWinter and assigns it to the Spring field.
func (o *SearchCompanyDataTypeSeasonality) SetSpring(v SearchCompanyDataTypeSeasonalityWinter) {
	o.Spring = &v
}

// GetSummer returns the Summer field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeSeasonality) GetSummer() SearchCompanyDataTypeSeasonalityWinter {
	if o == nil || IsNil(o.Summer) {
		var ret SearchCompanyDataTypeSeasonalityWinter
		return ret
	}
	return *o.Summer
}

// GetSummerOk returns a tuple with the Summer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeSeasonality) GetSummerOk() (*SearchCompanyDataTypeSeasonalityWinter, bool) {
	if o == nil || IsNil(o.Summer) {
		return nil, false
	}
	return o.Summer, true
}

// HasSummer returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeSeasonality) HasSummer() bool {
	if o != nil && !IsNil(o.Summer) {
		return true
	}

	return false
}

// SetSummer gets a reference to the given SearchCompanyDataTypeSeasonalityWinter and assigns it to the Summer field.
func (o *SearchCompanyDataTypeSeasonality) SetSummer(v SearchCompanyDataTypeSeasonalityWinter) {
	o.Summer = &v
}

// GetAutumn returns the Autumn field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeSeasonality) GetAutumn() SearchCompanyDataTypeSeasonalityWinter {
	if o == nil || IsNil(o.Autumn) {
		var ret SearchCompanyDataTypeSeasonalityWinter
		return ret
	}
	return *o.Autumn
}

// GetAutumnOk returns a tuple with the Autumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeSeasonality) GetAutumnOk() (*SearchCompanyDataTypeSeasonalityWinter, bool) {
	if o == nil || IsNil(o.Autumn) {
		return nil, false
	}
	return o.Autumn, true
}

// HasAutumn returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeSeasonality) HasAutumn() bool {
	if o != nil && !IsNil(o.Autumn) {
		return true
	}

	return false
}

// SetAutumn gets a reference to the given SearchCompanyDataTypeSeasonalityWinter and assigns it to the Autumn field.
func (o *SearchCompanyDataTypeSeasonality) SetAutumn(v SearchCompanyDataTypeSeasonalityWinter) {
	o.Autumn = &v
}

func (o SearchCompanyDataTypeSeasonality) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCompanyDataTypeSeasonality) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Winter) {
		toSerialize["winter"] = o.Winter
	}
	if !IsNil(o.Spring) {
		toSerialize["spring"] = o.Spring
	}
	if !IsNil(o.Summer) {
		toSerialize["summer"] = o.Summer
	}
	if !IsNil(o.Autumn) {
		toSerialize["autumn"] = o.Autumn
	}
	return toSerialize, nil
}

type NullableSearchCompanyDataTypeSeasonality struct {
	value *SearchCompanyDataTypeSeasonality
	isSet bool
}

func (v NullableSearchCompanyDataTypeSeasonality) Get() *SearchCompanyDataTypeSeasonality {
	return v.value
}

func (v *NullableSearchCompanyDataTypeSeasonality) Set(val *SearchCompanyDataTypeSeasonality) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCompanyDataTypeSeasonality) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCompanyDataTypeSeasonality) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCompanyDataTypeSeasonality(val *SearchCompanyDataTypeSeasonality) *NullableSearchCompanyDataTypeSeasonality {
	return &NullableSearchCompanyDataTypeSeasonality{value: val, isSet: true}
}

func (v NullableSearchCompanyDataTypeSeasonality) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCompanyDataTypeSeasonality) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


