/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the SearchCompanyDataTypeInternationalClassification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCompanyDataTypeInternationalClassification{}

// SearchCompanyDataTypeInternationalClassification struct for SearchCompanyDataTypeInternationalClassification
type SearchCompanyDataTypeInternationalClassification struct {
	Nace *SearchCompanyDataTypeInternationalClassificationNace `json:"nace,omitempty"`
	PrimarySic *SearchCompanyDataTypeInternationalClassificationPrimarySic `json:"primarySic,omitempty"`
	SecondarySic *string `json:"secondarySic,omitempty"`
}

// NewSearchCompanyDataTypeInternationalClassification instantiates a new SearchCompanyDataTypeInternationalClassification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCompanyDataTypeInternationalClassification() *SearchCompanyDataTypeInternationalClassification {
	this := SearchCompanyDataTypeInternationalClassification{}
	return &this
}

// NewSearchCompanyDataTypeInternationalClassificationWithDefaults instantiates a new SearchCompanyDataTypeInternationalClassification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCompanyDataTypeInternationalClassificationWithDefaults() *SearchCompanyDataTypeInternationalClassification {
	this := SearchCompanyDataTypeInternationalClassification{}
	return &this
}

// GetNace returns the Nace field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeInternationalClassification) GetNace() SearchCompanyDataTypeInternationalClassificationNace {
	if o == nil || IsNil(o.Nace) {
		var ret SearchCompanyDataTypeInternationalClassificationNace
		return ret
	}
	return *o.Nace
}

// GetNaceOk returns a tuple with the Nace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeInternationalClassification) GetNaceOk() (*SearchCompanyDataTypeInternationalClassificationNace, bool) {
	if o == nil || IsNil(o.Nace) {
		return nil, false
	}
	return o.Nace, true
}

// HasNace returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeInternationalClassification) HasNace() bool {
	if o != nil && !IsNil(o.Nace) {
		return true
	}

	return false
}

// SetNace gets a reference to the given SearchCompanyDataTypeInternationalClassificationNace and assigns it to the Nace field.
func (o *SearchCompanyDataTypeInternationalClassification) SetNace(v SearchCompanyDataTypeInternationalClassificationNace) {
	o.Nace = &v
}

// GetPrimarySic returns the PrimarySic field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeInternationalClassification) GetPrimarySic() SearchCompanyDataTypeInternationalClassificationPrimarySic {
	if o == nil || IsNil(o.PrimarySic) {
		var ret SearchCompanyDataTypeInternationalClassificationPrimarySic
		return ret
	}
	return *o.PrimarySic
}

// GetPrimarySicOk returns a tuple with the PrimarySic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeInternationalClassification) GetPrimarySicOk() (*SearchCompanyDataTypeInternationalClassificationPrimarySic, bool) {
	if o == nil || IsNil(o.PrimarySic) {
		return nil, false
	}
	return o.PrimarySic, true
}

// HasPrimarySic returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeInternationalClassification) HasPrimarySic() bool {
	if o != nil && !IsNil(o.PrimarySic) {
		return true
	}

	return false
}

// SetPrimarySic gets a reference to the given SearchCompanyDataTypeInternationalClassificationPrimarySic and assigns it to the PrimarySic field.
func (o *SearchCompanyDataTypeInternationalClassification) SetPrimarySic(v SearchCompanyDataTypeInternationalClassificationPrimarySic) {
	o.PrimarySic = &v
}

// GetSecondarySic returns the SecondarySic field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeInternationalClassification) GetSecondarySic() string {
	if o == nil || IsNil(o.SecondarySic) {
		var ret string
		return ret
	}
	return *o.SecondarySic
}

// GetSecondarySicOk returns a tuple with the SecondarySic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeInternationalClassification) GetSecondarySicOk() (*string, bool) {
	if o == nil || IsNil(o.SecondarySic) {
		return nil, false
	}
	return o.SecondarySic, true
}

// HasSecondarySic returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeInternationalClassification) HasSecondarySic() bool {
	if o != nil && !IsNil(o.SecondarySic) {
		return true
	}

	return false
}

// SetSecondarySic gets a reference to the given string and assigns it to the SecondarySic field.
func (o *SearchCompanyDataTypeInternationalClassification) SetSecondarySic(v string) {
	o.SecondarySic = &v
}

func (o SearchCompanyDataTypeInternationalClassification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCompanyDataTypeInternationalClassification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nace) {
		toSerialize["nace"] = o.Nace
	}
	if !IsNil(o.PrimarySic) {
		toSerialize["primarySic"] = o.PrimarySic
	}
	if !IsNil(o.SecondarySic) {
		toSerialize["secondarySic"] = o.SecondarySic
	}
	return toSerialize, nil
}

type NullableSearchCompanyDataTypeInternationalClassification struct {
	value *SearchCompanyDataTypeInternationalClassification
	isSet bool
}

func (v NullableSearchCompanyDataTypeInternationalClassification) Get() *SearchCompanyDataTypeInternationalClassification {
	return v.value
}

func (v *NullableSearchCompanyDataTypeInternationalClassification) Set(val *SearchCompanyDataTypeInternationalClassification) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCompanyDataTypeInternationalClassification) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCompanyDataTypeInternationalClassification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCompanyDataTypeInternationalClassification(val *SearchCompanyDataTypeInternationalClassification) *NullableSearchCompanyDataTypeInternationalClassification {
	return &NullableSearchCompanyDataTypeInternationalClassification{value: val, isSet: true}
}

func (v NullableSearchCompanyDataTypeInternationalClassification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCompanyDataTypeInternationalClassification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


