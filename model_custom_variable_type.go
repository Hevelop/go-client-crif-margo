/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomVariableType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomVariableType{}

// CustomVariableType struct for CustomVariableType
type CustomVariableType struct {
	// It identifies the position of the custom variable inside the portfolio. It is mandatory.
	Index int32 `json:"index"`
	// Using this field during portfolio creation, the system assigns the name to the custom variable.
	Name *string `json:"name,omitempty"`
	// The item defines the data type of custom variable during portfolio creation.
	Type *string `json:"type,omitempty"`
	// It contains custom variable's value.
	Value *string `json:"value,omitempty"`
}

type _CustomVariableType CustomVariableType

// NewCustomVariableType instantiates a new CustomVariableType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomVariableType(index int32) *CustomVariableType {
	this := CustomVariableType{}
	this.Index = index
	return &this
}

// NewCustomVariableTypeWithDefaults instantiates a new CustomVariableType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomVariableTypeWithDefaults() *CustomVariableType {
	this := CustomVariableType{}
	return &this
}

// GetIndex returns the Index field value
func (o *CustomVariableType) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *CustomVariableType) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *CustomVariableType) SetIndex(v int32) {
	o.Index = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CustomVariableType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomVariableType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CustomVariableType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CustomVariableType) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CustomVariableType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomVariableType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CustomVariableType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CustomVariableType) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CustomVariableType) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomVariableType) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CustomVariableType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *CustomVariableType) SetValue(v string) {
	o.Value = &v
}

func (o CustomVariableType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomVariableType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["index"] = o.Index
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *CustomVariableType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomVariableType := _CustomVariableType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomVariableType)

	if err != nil {
		return err
	}

	*o = CustomVariableType(varCustomVariableType)

	return err
}

type NullableCustomVariableType struct {
	value *CustomVariableType
	isSet bool
}

func (v NullableCustomVariableType) Get() *CustomVariableType {
	return v.value
}

func (v *NullableCustomVariableType) Set(val *CustomVariableType) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomVariableType) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomVariableType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomVariableType(val *CustomVariableType) *NullableCustomVariableType {
	return &NullableCustomVariableType{value: val, isSet: true}
}

func (v NullableCustomVariableType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomVariableType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


