/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the ProductArrayType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductArrayType{}

// ProductArrayType Array of product
type ProductArrayType struct {
	Content []ProductType `json:"content,omitempty"`
}

// NewProductArrayType instantiates a new ProductArrayType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductArrayType() *ProductArrayType {
	this := ProductArrayType{}
	return &this
}

// NewProductArrayTypeWithDefaults instantiates a new ProductArrayType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductArrayTypeWithDefaults() *ProductArrayType {
	this := ProductArrayType{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ProductArrayType) GetContent() []ProductType {
	if o == nil || IsNil(o.Content) {
		var ret []ProductType
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductArrayType) GetContentOk() ([]ProductType, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ProductArrayType) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given []ProductType and assigns it to the Content field.
func (o *ProductArrayType) SetContent(v []ProductType) {
	o.Content = v
}

func (o ProductArrayType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductArrayType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

type NullableProductArrayType struct {
	value *ProductArrayType
	isSet bool
}

func (v NullableProductArrayType) Get() *ProductArrayType {
	return v.value
}

func (v *NullableProductArrayType) Set(val *ProductArrayType) {
	v.value = val
	v.isSet = true
}

func (v NullableProductArrayType) IsSet() bool {
	return v.isSet
}

func (v *NullableProductArrayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductArrayType(val *ProductArrayType) *NullableProductArrayType {
	return &NullableProductArrayType{value: val, isSet: true}
}

func (v NullableProductArrayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductArrayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


