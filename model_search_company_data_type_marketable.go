/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the SearchCompanyDataTypeMarketable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCompanyDataTypeMarketable{}

// SearchCompanyDataTypeMarketable struct for SearchCompanyDataTypeMarketable
type SearchCompanyDataTypeMarketable struct {
	IsMarketable *bool `json:"isMarketable,omitempty"`
}

// NewSearchCompanyDataTypeMarketable instantiates a new SearchCompanyDataTypeMarketable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCompanyDataTypeMarketable() *SearchCompanyDataTypeMarketable {
	this := SearchCompanyDataTypeMarketable{}
	return &this
}

// NewSearchCompanyDataTypeMarketableWithDefaults instantiates a new SearchCompanyDataTypeMarketable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCompanyDataTypeMarketableWithDefaults() *SearchCompanyDataTypeMarketable {
	this := SearchCompanyDataTypeMarketable{}
	return &this
}

// GetIsMarketable returns the IsMarketable field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeMarketable) GetIsMarketable() bool {
	if o == nil || IsNil(o.IsMarketable) {
		var ret bool
		return ret
	}
	return *o.IsMarketable
}

// GetIsMarketableOk returns a tuple with the IsMarketable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeMarketable) GetIsMarketableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMarketable) {
		return nil, false
	}
	return o.IsMarketable, true
}

// HasIsMarketable returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeMarketable) HasIsMarketable() bool {
	if o != nil && !IsNil(o.IsMarketable) {
		return true
	}

	return false
}

// SetIsMarketable gets a reference to the given bool and assigns it to the IsMarketable field.
func (o *SearchCompanyDataTypeMarketable) SetIsMarketable(v bool) {
	o.IsMarketable = &v
}

func (o SearchCompanyDataTypeMarketable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCompanyDataTypeMarketable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsMarketable) {
		toSerialize["isMarketable"] = o.IsMarketable
	}
	return toSerialize, nil
}

type NullableSearchCompanyDataTypeMarketable struct {
	value *SearchCompanyDataTypeMarketable
	isSet bool
}

func (v NullableSearchCompanyDataTypeMarketable) Get() *SearchCompanyDataTypeMarketable {
	return v.value
}

func (v *NullableSearchCompanyDataTypeMarketable) Set(val *SearchCompanyDataTypeMarketable) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCompanyDataTypeMarketable) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCompanyDataTypeMarketable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCompanyDataTypeMarketable(val *SearchCompanyDataTypeMarketable) *NullableSearchCompanyDataTypeMarketable {
	return &NullableSearchCompanyDataTypeMarketable{value: val, isSet: true}
}

func (v NullableSearchCompanyDataTypeMarketable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCompanyDataTypeMarketable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


