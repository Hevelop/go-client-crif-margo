/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the FiltersType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FiltersType{}

// FiltersType It must contain all filter parameters linked to the companies' business information.  All filter parameters are available to the following page: https://developer.crif.com/apis/margo/.
type FiltersType struct {
	// The array contains all fields with data type **numeric**.  The object must have the following structure: * filterId: it identifies the name of the field used as a filter * properties: this object have to contain the range of value to be filtered.
	Numericfilters []FiltersTypeNumericfiltersInner `json:"numericfilters,omitempty"`
	// The array contains all fields with data type ***date***.  The object must have the following structure: * filterId: it identifies the name of the field used as a filter * properties: this object have to contain the range of date to be filtered.
	Datefilters []FiltersTypeDatefiltersInner `json:"datefilters,omitempty"`
	// The array contains all fields with data type ***boolean***.  The object must have the following structure: * filterId: it identifies the name of the field used as a filter * value: the field have to contain a boolean value (true or false).
	Booleanfilters []FiltersTypeBooleanfiltersInner `json:"booleanfilters,omitempty"`
	// The array contains all fields with data type ***string***.  The object must have the following structure: * filterId: it identifies the name of the field used as a filter * value: the field have to contain a label.
	Stringfilters []FiltersTypeStringfiltersInner `json:"stringfilters,omitempty"`
	// The array contains all fields with data type ***domain***.  The object must have the following structure: * filterId: it identifies the name of the field used as a filter * codes: the field have to contain a label.
	Domainfilters []FiltersTypeDomainfiltersInner `json:"domainfilters,omitempty"`
}

// NewFiltersType instantiates a new FiltersType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiltersType() *FiltersType {
	this := FiltersType{}
	return &this
}

// NewFiltersTypeWithDefaults instantiates a new FiltersType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiltersTypeWithDefaults() *FiltersType {
	this := FiltersType{}
	return &this
}

// GetNumericfilters returns the Numericfilters field value if set, zero value otherwise.
func (o *FiltersType) GetNumericfilters() []FiltersTypeNumericfiltersInner {
	if o == nil || IsNil(o.Numericfilters) {
		var ret []FiltersTypeNumericfiltersInner
		return ret
	}
	return o.Numericfilters
}

// GetNumericfiltersOk returns a tuple with the Numericfilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersType) GetNumericfiltersOk() ([]FiltersTypeNumericfiltersInner, bool) {
	if o == nil || IsNil(o.Numericfilters) {
		return nil, false
	}
	return o.Numericfilters, true
}

// HasNumericfilters returns a boolean if a field has been set.
func (o *FiltersType) HasNumericfilters() bool {
	if o != nil && !IsNil(o.Numericfilters) {
		return true
	}

	return false
}

// SetNumericfilters gets a reference to the given []FiltersTypeNumericfiltersInner and assigns it to the Numericfilters field.
func (o *FiltersType) SetNumericfilters(v []FiltersTypeNumericfiltersInner) {
	o.Numericfilters = v
}

// GetDatefilters returns the Datefilters field value if set, zero value otherwise.
func (o *FiltersType) GetDatefilters() []FiltersTypeDatefiltersInner {
	if o == nil || IsNil(o.Datefilters) {
		var ret []FiltersTypeDatefiltersInner
		return ret
	}
	return o.Datefilters
}

// GetDatefiltersOk returns a tuple with the Datefilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersType) GetDatefiltersOk() ([]FiltersTypeDatefiltersInner, bool) {
	if o == nil || IsNil(o.Datefilters) {
		return nil, false
	}
	return o.Datefilters, true
}

// HasDatefilters returns a boolean if a field has been set.
func (o *FiltersType) HasDatefilters() bool {
	if o != nil && !IsNil(o.Datefilters) {
		return true
	}

	return false
}

// SetDatefilters gets a reference to the given []FiltersTypeDatefiltersInner and assigns it to the Datefilters field.
func (o *FiltersType) SetDatefilters(v []FiltersTypeDatefiltersInner) {
	o.Datefilters = v
}

// GetBooleanfilters returns the Booleanfilters field value if set, zero value otherwise.
func (o *FiltersType) GetBooleanfilters() []FiltersTypeBooleanfiltersInner {
	if o == nil || IsNil(o.Booleanfilters) {
		var ret []FiltersTypeBooleanfiltersInner
		return ret
	}
	return o.Booleanfilters
}

// GetBooleanfiltersOk returns a tuple with the Booleanfilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersType) GetBooleanfiltersOk() ([]FiltersTypeBooleanfiltersInner, bool) {
	if o == nil || IsNil(o.Booleanfilters) {
		return nil, false
	}
	return o.Booleanfilters, true
}

// HasBooleanfilters returns a boolean if a field has been set.
func (o *FiltersType) HasBooleanfilters() bool {
	if o != nil && !IsNil(o.Booleanfilters) {
		return true
	}

	return false
}

// SetBooleanfilters gets a reference to the given []FiltersTypeBooleanfiltersInner and assigns it to the Booleanfilters field.
func (o *FiltersType) SetBooleanfilters(v []FiltersTypeBooleanfiltersInner) {
	o.Booleanfilters = v
}

// GetStringfilters returns the Stringfilters field value if set, zero value otherwise.
func (o *FiltersType) GetStringfilters() []FiltersTypeStringfiltersInner {
	if o == nil || IsNil(o.Stringfilters) {
		var ret []FiltersTypeStringfiltersInner
		return ret
	}
	return o.Stringfilters
}

// GetStringfiltersOk returns a tuple with the Stringfilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersType) GetStringfiltersOk() ([]FiltersTypeStringfiltersInner, bool) {
	if o == nil || IsNil(o.Stringfilters) {
		return nil, false
	}
	return o.Stringfilters, true
}

// HasStringfilters returns a boolean if a field has been set.
func (o *FiltersType) HasStringfilters() bool {
	if o != nil && !IsNil(o.Stringfilters) {
		return true
	}

	return false
}

// SetStringfilters gets a reference to the given []FiltersTypeStringfiltersInner and assigns it to the Stringfilters field.
func (o *FiltersType) SetStringfilters(v []FiltersTypeStringfiltersInner) {
	o.Stringfilters = v
}

// GetDomainfilters returns the Domainfilters field value if set, zero value otherwise.
func (o *FiltersType) GetDomainfilters() []FiltersTypeDomainfiltersInner {
	if o == nil || IsNil(o.Domainfilters) {
		var ret []FiltersTypeDomainfiltersInner
		return ret
	}
	return o.Domainfilters
}

// GetDomainfiltersOk returns a tuple with the Domainfilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersType) GetDomainfiltersOk() ([]FiltersTypeDomainfiltersInner, bool) {
	if o == nil || IsNil(o.Domainfilters) {
		return nil, false
	}
	return o.Domainfilters, true
}

// HasDomainfilters returns a boolean if a field has been set.
func (o *FiltersType) HasDomainfilters() bool {
	if o != nil && !IsNil(o.Domainfilters) {
		return true
	}

	return false
}

// SetDomainfilters gets a reference to the given []FiltersTypeDomainfiltersInner and assigns it to the Domainfilters field.
func (o *FiltersType) SetDomainfilters(v []FiltersTypeDomainfiltersInner) {
	o.Domainfilters = v
}

func (o FiltersType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FiltersType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Numericfilters) {
		toSerialize["numericfilters"] = o.Numericfilters
	}
	if !IsNil(o.Datefilters) {
		toSerialize["datefilters"] = o.Datefilters
	}
	if !IsNil(o.Booleanfilters) {
		toSerialize["booleanfilters"] = o.Booleanfilters
	}
	if !IsNil(o.Stringfilters) {
		toSerialize["stringfilters"] = o.Stringfilters
	}
	if !IsNil(o.Domainfilters) {
		toSerialize["domainfilters"] = o.Domainfilters
	}
	return toSerialize, nil
}

type NullableFiltersType struct {
	value *FiltersType
	isSet bool
}

func (v NullableFiltersType) Get() *FiltersType {
	return v.value
}

func (v *NullableFiltersType) Set(val *FiltersType) {
	v.value = val
	v.isSet = true
}

func (v NullableFiltersType) IsSet() bool {
	return v.isSet
}

func (v *NullableFiltersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiltersType(val *FiltersType) *NullableFiltersType {
	return &NullableFiltersType{value: val, isSet: true}
}

func (v NullableFiltersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiltersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


