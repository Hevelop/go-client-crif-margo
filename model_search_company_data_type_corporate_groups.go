/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the SearchCompanyDataTypeCorporateGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCompanyDataTypeCorporateGroups{}

// SearchCompanyDataTypeCorporateGroups struct for SearchCompanyDataTypeCorporateGroups
type SearchCompanyDataTypeCorporateGroups struct {
	BelongsToGroup *bool `json:"belongsToGroup,omitempty"`
	GroupName *string `json:"groupName,omitempty"`
	HoldingCompanyName *string `json:"holdingCompanyName,omitempty"`
	HoldingVatCode *string `json:"holdingVatCode,omitempty"`
	HoldingCountry *SearchCompanyDataTypeAddressCountry `json:"holdingCountry,omitempty"`
	NationalParentCompany *SearchCompanyDataTypeCorporateGroupsNationalParentCompany `json:"nationalParentCompany,omitempty"`
	HasForeignParentCompany *bool `json:"hasForeignParentCompany,omitempty"`
	HasForeignSubsidiaries *bool `json:"hasForeignSubsidiaries,omitempty"`
	HasForeignParents *bool `json:"hasForeignParents,omitempty"`
}

// NewSearchCompanyDataTypeCorporateGroups instantiates a new SearchCompanyDataTypeCorporateGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCompanyDataTypeCorporateGroups() *SearchCompanyDataTypeCorporateGroups {
	this := SearchCompanyDataTypeCorporateGroups{}
	return &this
}

// NewSearchCompanyDataTypeCorporateGroupsWithDefaults instantiates a new SearchCompanyDataTypeCorporateGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCompanyDataTypeCorporateGroupsWithDefaults() *SearchCompanyDataTypeCorporateGroups {
	this := SearchCompanyDataTypeCorporateGroups{}
	return &this
}

// GetBelongsToGroup returns the BelongsToGroup field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroups) GetBelongsToGroup() bool {
	if o == nil || IsNil(o.BelongsToGroup) {
		var ret bool
		return ret
	}
	return *o.BelongsToGroup
}

// GetBelongsToGroupOk returns a tuple with the BelongsToGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroups) GetBelongsToGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.BelongsToGroup) {
		return nil, false
	}
	return o.BelongsToGroup, true
}

// HasBelongsToGroup returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroups) HasBelongsToGroup() bool {
	if o != nil && !IsNil(o.BelongsToGroup) {
		return true
	}

	return false
}

// SetBelongsToGroup gets a reference to the given bool and assigns it to the BelongsToGroup field.
func (o *SearchCompanyDataTypeCorporateGroups) SetBelongsToGroup(v bool) {
	o.BelongsToGroup = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroups) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroups) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroups) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *SearchCompanyDataTypeCorporateGroups) SetGroupName(v string) {
	o.GroupName = &v
}

// GetHoldingCompanyName returns the HoldingCompanyName field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroups) GetHoldingCompanyName() string {
	if o == nil || IsNil(o.HoldingCompanyName) {
		var ret string
		return ret
	}
	return *o.HoldingCompanyName
}

// GetHoldingCompanyNameOk returns a tuple with the HoldingCompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroups) GetHoldingCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.HoldingCompanyName) {
		return nil, false
	}
	return o.HoldingCompanyName, true
}

// HasHoldingCompanyName returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroups) HasHoldingCompanyName() bool {
	if o != nil && !IsNil(o.HoldingCompanyName) {
		return true
	}

	return false
}

// SetHoldingCompanyName gets a reference to the given string and assigns it to the HoldingCompanyName field.
func (o *SearchCompanyDataTypeCorporateGroups) SetHoldingCompanyName(v string) {
	o.HoldingCompanyName = &v
}

// GetHoldingVatCode returns the HoldingVatCode field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroups) GetHoldingVatCode() string {
	if o == nil || IsNil(o.HoldingVatCode) {
		var ret string
		return ret
	}
	return *o.HoldingVatCode
}

// GetHoldingVatCodeOk returns a tuple with the HoldingVatCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroups) GetHoldingVatCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HoldingVatCode) {
		return nil, false
	}
	return o.HoldingVatCode, true
}

// HasHoldingVatCode returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroups) HasHoldingVatCode() bool {
	if o != nil && !IsNil(o.HoldingVatCode) {
		return true
	}

	return false
}

// SetHoldingVatCode gets a reference to the given string and assigns it to the HoldingVatCode field.
func (o *SearchCompanyDataTypeCorporateGroups) SetHoldingVatCode(v string) {
	o.HoldingVatCode = &v
}

// GetHoldingCountry returns the HoldingCountry field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroups) GetHoldingCountry() SearchCompanyDataTypeAddressCountry {
	if o == nil || IsNil(o.HoldingCountry) {
		var ret SearchCompanyDataTypeAddressCountry
		return ret
	}
	return *o.HoldingCountry
}

// GetHoldingCountryOk returns a tuple with the HoldingCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroups) GetHoldingCountryOk() (*SearchCompanyDataTypeAddressCountry, bool) {
	if o == nil || IsNil(o.HoldingCountry) {
		return nil, false
	}
	return o.HoldingCountry, true
}

// HasHoldingCountry returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroups) HasHoldingCountry() bool {
	if o != nil && !IsNil(o.HoldingCountry) {
		return true
	}

	return false
}

// SetHoldingCountry gets a reference to the given SearchCompanyDataTypeAddressCountry and assigns it to the HoldingCountry field.
func (o *SearchCompanyDataTypeCorporateGroups) SetHoldingCountry(v SearchCompanyDataTypeAddressCountry) {
	o.HoldingCountry = &v
}

// GetNationalParentCompany returns the NationalParentCompany field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroups) GetNationalParentCompany() SearchCompanyDataTypeCorporateGroupsNationalParentCompany {
	if o == nil || IsNil(o.NationalParentCompany) {
		var ret SearchCompanyDataTypeCorporateGroupsNationalParentCompany
		return ret
	}
	return *o.NationalParentCompany
}

// GetNationalParentCompanyOk returns a tuple with the NationalParentCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroups) GetNationalParentCompanyOk() (*SearchCompanyDataTypeCorporateGroupsNationalParentCompany, bool) {
	if o == nil || IsNil(o.NationalParentCompany) {
		return nil, false
	}
	return o.NationalParentCompany, true
}

// HasNationalParentCompany returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroups) HasNationalParentCompany() bool {
	if o != nil && !IsNil(o.NationalParentCompany) {
		return true
	}

	return false
}

// SetNationalParentCompany gets a reference to the given SearchCompanyDataTypeCorporateGroupsNationalParentCompany and assigns it to the NationalParentCompany field.
func (o *SearchCompanyDataTypeCorporateGroups) SetNationalParentCompany(v SearchCompanyDataTypeCorporateGroupsNationalParentCompany) {
	o.NationalParentCompany = &v
}

// GetHasForeignParentCompany returns the HasForeignParentCompany field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroups) GetHasForeignParentCompany() bool {
	if o == nil || IsNil(o.HasForeignParentCompany) {
		var ret bool
		return ret
	}
	return *o.HasForeignParentCompany
}

// GetHasForeignParentCompanyOk returns a tuple with the HasForeignParentCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroups) GetHasForeignParentCompanyOk() (*bool, bool) {
	if o == nil || IsNil(o.HasForeignParentCompany) {
		return nil, false
	}
	return o.HasForeignParentCompany, true
}

// HasHasForeignParentCompany returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroups) HasHasForeignParentCompany() bool {
	if o != nil && !IsNil(o.HasForeignParentCompany) {
		return true
	}

	return false
}

// SetHasForeignParentCompany gets a reference to the given bool and assigns it to the HasForeignParentCompany field.
func (o *SearchCompanyDataTypeCorporateGroups) SetHasForeignParentCompany(v bool) {
	o.HasForeignParentCompany = &v
}

// GetHasForeignSubsidiaries returns the HasForeignSubsidiaries field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroups) GetHasForeignSubsidiaries() bool {
	if o == nil || IsNil(o.HasForeignSubsidiaries) {
		var ret bool
		return ret
	}
	return *o.HasForeignSubsidiaries
}

// GetHasForeignSubsidiariesOk returns a tuple with the HasForeignSubsidiaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroups) GetHasForeignSubsidiariesOk() (*bool, bool) {
	if o == nil || IsNil(o.HasForeignSubsidiaries) {
		return nil, false
	}
	return o.HasForeignSubsidiaries, true
}

// HasHasForeignSubsidiaries returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroups) HasHasForeignSubsidiaries() bool {
	if o != nil && !IsNil(o.HasForeignSubsidiaries) {
		return true
	}

	return false
}

// SetHasForeignSubsidiaries gets a reference to the given bool and assigns it to the HasForeignSubsidiaries field.
func (o *SearchCompanyDataTypeCorporateGroups) SetHasForeignSubsidiaries(v bool) {
	o.HasForeignSubsidiaries = &v
}

// GetHasForeignParents returns the HasForeignParents field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroups) GetHasForeignParents() bool {
	if o == nil || IsNil(o.HasForeignParents) {
		var ret bool
		return ret
	}
	return *o.HasForeignParents
}

// GetHasForeignParentsOk returns a tuple with the HasForeignParents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroups) GetHasForeignParentsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasForeignParents) {
		return nil, false
	}
	return o.HasForeignParents, true
}

// HasHasForeignParents returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroups) HasHasForeignParents() bool {
	if o != nil && !IsNil(o.HasForeignParents) {
		return true
	}

	return false
}

// SetHasForeignParents gets a reference to the given bool and assigns it to the HasForeignParents field.
func (o *SearchCompanyDataTypeCorporateGroups) SetHasForeignParents(v bool) {
	o.HasForeignParents = &v
}

func (o SearchCompanyDataTypeCorporateGroups) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCompanyDataTypeCorporateGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BelongsToGroup) {
		toSerialize["belongsToGroup"] = o.BelongsToGroup
	}
	if !IsNil(o.GroupName) {
		toSerialize["groupName"] = o.GroupName
	}
	if !IsNil(o.HoldingCompanyName) {
		toSerialize["holdingCompanyName"] = o.HoldingCompanyName
	}
	if !IsNil(o.HoldingVatCode) {
		toSerialize["holdingVatCode"] = o.HoldingVatCode
	}
	if !IsNil(o.HoldingCountry) {
		toSerialize["holdingCountry"] = o.HoldingCountry
	}
	if !IsNil(o.NationalParentCompany) {
		toSerialize["nationalParentCompany"] = o.NationalParentCompany
	}
	if !IsNil(o.HasForeignParentCompany) {
		toSerialize["hasForeignParentCompany"] = o.HasForeignParentCompany
	}
	if !IsNil(o.HasForeignSubsidiaries) {
		toSerialize["hasForeignSubsidiaries"] = o.HasForeignSubsidiaries
	}
	if !IsNil(o.HasForeignParents) {
		toSerialize["hasForeignParents"] = o.HasForeignParents
	}
	return toSerialize, nil
}

type NullableSearchCompanyDataTypeCorporateGroups struct {
	value *SearchCompanyDataTypeCorporateGroups
	isSet bool
}

func (v NullableSearchCompanyDataTypeCorporateGroups) Get() *SearchCompanyDataTypeCorporateGroups {
	return v.value
}

func (v *NullableSearchCompanyDataTypeCorporateGroups) Set(val *SearchCompanyDataTypeCorporateGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCompanyDataTypeCorporateGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCompanyDataTypeCorporateGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCompanyDataTypeCorporateGroups(val *SearchCompanyDataTypeCorporateGroups) *NullableSearchCompanyDataTypeCorporateGroups {
	return &NullableSearchCompanyDataTypeCorporateGroups{value: val, isSet: true}
}

func (v NullableSearchCompanyDataTypeCorporateGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCompanyDataTypeCorporateGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


