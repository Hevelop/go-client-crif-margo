/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
	"time"
)

// checks if the DownloadCompanyDataTypeEcofin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DownloadCompanyDataTypeEcofin{}

// DownloadCompanyDataTypeEcofin struct for DownloadCompanyDataTypeEcofin
type DownloadCompanyDataTypeEcofin struct {
	BalanceSheetDate *time.Time `json:"balanceSheetDate,omitempty"`
	TurnoverRange *SearchCompanyDataTypeEcofinTurnoverRange `json:"turnoverRange,omitempty"`
	TurnoverYear *float32 `json:"turnoverYear,omitempty"`
	Turnover *float32 `json:"turnover,omitempty"`
	TurnoverTrend *float32 `json:"turnoverTrend,omitempty"`
	ShareCapital *float32 `json:"shareCapital,omitempty"`
	NetWorth *float32 `json:"netWorth,omitempty"`
}

// NewDownloadCompanyDataTypeEcofin instantiates a new DownloadCompanyDataTypeEcofin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDownloadCompanyDataTypeEcofin() *DownloadCompanyDataTypeEcofin {
	this := DownloadCompanyDataTypeEcofin{}
	return &this
}

// NewDownloadCompanyDataTypeEcofinWithDefaults instantiates a new DownloadCompanyDataTypeEcofin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDownloadCompanyDataTypeEcofinWithDefaults() *DownloadCompanyDataTypeEcofin {
	this := DownloadCompanyDataTypeEcofin{}
	return &this
}

// GetBalanceSheetDate returns the BalanceSheetDate field value if set, zero value otherwise.
func (o *DownloadCompanyDataTypeEcofin) GetBalanceSheetDate() time.Time {
	if o == nil || IsNil(o.BalanceSheetDate) {
		var ret time.Time
		return ret
	}
	return *o.BalanceSheetDate
}

// GetBalanceSheetDateOk returns a tuple with the BalanceSheetDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadCompanyDataTypeEcofin) GetBalanceSheetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BalanceSheetDate) {
		return nil, false
	}
	return o.BalanceSheetDate, true
}

// HasBalanceSheetDate returns a boolean if a field has been set.
func (o *DownloadCompanyDataTypeEcofin) HasBalanceSheetDate() bool {
	if o != nil && !IsNil(o.BalanceSheetDate) {
		return true
	}

	return false
}

// SetBalanceSheetDate gets a reference to the given time.Time and assigns it to the BalanceSheetDate field.
func (o *DownloadCompanyDataTypeEcofin) SetBalanceSheetDate(v time.Time) {
	o.BalanceSheetDate = &v
}

// GetTurnoverRange returns the TurnoverRange field value if set, zero value otherwise.
func (o *DownloadCompanyDataTypeEcofin) GetTurnoverRange() SearchCompanyDataTypeEcofinTurnoverRange {
	if o == nil || IsNil(o.TurnoverRange) {
		var ret SearchCompanyDataTypeEcofinTurnoverRange
		return ret
	}
	return *o.TurnoverRange
}

// GetTurnoverRangeOk returns a tuple with the TurnoverRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadCompanyDataTypeEcofin) GetTurnoverRangeOk() (*SearchCompanyDataTypeEcofinTurnoverRange, bool) {
	if o == nil || IsNil(o.TurnoverRange) {
		return nil, false
	}
	return o.TurnoverRange, true
}

// HasTurnoverRange returns a boolean if a field has been set.
func (o *DownloadCompanyDataTypeEcofin) HasTurnoverRange() bool {
	if o != nil && !IsNil(o.TurnoverRange) {
		return true
	}

	return false
}

// SetTurnoverRange gets a reference to the given SearchCompanyDataTypeEcofinTurnoverRange and assigns it to the TurnoverRange field.
func (o *DownloadCompanyDataTypeEcofin) SetTurnoverRange(v SearchCompanyDataTypeEcofinTurnoverRange) {
	o.TurnoverRange = &v
}

// GetTurnoverYear returns the TurnoverYear field value if set, zero value otherwise.
func (o *DownloadCompanyDataTypeEcofin) GetTurnoverYear() float32 {
	if o == nil || IsNil(o.TurnoverYear) {
		var ret float32
		return ret
	}
	return *o.TurnoverYear
}

// GetTurnoverYearOk returns a tuple with the TurnoverYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadCompanyDataTypeEcofin) GetTurnoverYearOk() (*float32, bool) {
	if o == nil || IsNil(o.TurnoverYear) {
		return nil, false
	}
	return o.TurnoverYear, true
}

// HasTurnoverYear returns a boolean if a field has been set.
func (o *DownloadCompanyDataTypeEcofin) HasTurnoverYear() bool {
	if o != nil && !IsNil(o.TurnoverYear) {
		return true
	}

	return false
}

// SetTurnoverYear gets a reference to the given float32 and assigns it to the TurnoverYear field.
func (o *DownloadCompanyDataTypeEcofin) SetTurnoverYear(v float32) {
	o.TurnoverYear = &v
}

// GetTurnover returns the Turnover field value if set, zero value otherwise.
func (o *DownloadCompanyDataTypeEcofin) GetTurnover() float32 {
	if o == nil || IsNil(o.Turnover) {
		var ret float32
		return ret
	}
	return *o.Turnover
}

// GetTurnoverOk returns a tuple with the Turnover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadCompanyDataTypeEcofin) GetTurnoverOk() (*float32, bool) {
	if o == nil || IsNil(o.Turnover) {
		return nil, false
	}
	return o.Turnover, true
}

// HasTurnover returns a boolean if a field has been set.
func (o *DownloadCompanyDataTypeEcofin) HasTurnover() bool {
	if o != nil && !IsNil(o.Turnover) {
		return true
	}

	return false
}

// SetTurnover gets a reference to the given float32 and assigns it to the Turnover field.
func (o *DownloadCompanyDataTypeEcofin) SetTurnover(v float32) {
	o.Turnover = &v
}

// GetTurnoverTrend returns the TurnoverTrend field value if set, zero value otherwise.
func (o *DownloadCompanyDataTypeEcofin) GetTurnoverTrend() float32 {
	if o == nil || IsNil(o.TurnoverTrend) {
		var ret float32
		return ret
	}
	return *o.TurnoverTrend
}

// GetTurnoverTrendOk returns a tuple with the TurnoverTrend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadCompanyDataTypeEcofin) GetTurnoverTrendOk() (*float32, bool) {
	if o == nil || IsNil(o.TurnoverTrend) {
		return nil, false
	}
	return o.TurnoverTrend, true
}

// HasTurnoverTrend returns a boolean if a field has been set.
func (o *DownloadCompanyDataTypeEcofin) HasTurnoverTrend() bool {
	if o != nil && !IsNil(o.TurnoverTrend) {
		return true
	}

	return false
}

// SetTurnoverTrend gets a reference to the given float32 and assigns it to the TurnoverTrend field.
func (o *DownloadCompanyDataTypeEcofin) SetTurnoverTrend(v float32) {
	o.TurnoverTrend = &v
}

// GetShareCapital returns the ShareCapital field value if set, zero value otherwise.
func (o *DownloadCompanyDataTypeEcofin) GetShareCapital() float32 {
	if o == nil || IsNil(o.ShareCapital) {
		var ret float32
		return ret
	}
	return *o.ShareCapital
}

// GetShareCapitalOk returns a tuple with the ShareCapital field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadCompanyDataTypeEcofin) GetShareCapitalOk() (*float32, bool) {
	if o == nil || IsNil(o.ShareCapital) {
		return nil, false
	}
	return o.ShareCapital, true
}

// HasShareCapital returns a boolean if a field has been set.
func (o *DownloadCompanyDataTypeEcofin) HasShareCapital() bool {
	if o != nil && !IsNil(o.ShareCapital) {
		return true
	}

	return false
}

// SetShareCapital gets a reference to the given float32 and assigns it to the ShareCapital field.
func (o *DownloadCompanyDataTypeEcofin) SetShareCapital(v float32) {
	o.ShareCapital = &v
}

// GetNetWorth returns the NetWorth field value if set, zero value otherwise.
func (o *DownloadCompanyDataTypeEcofin) GetNetWorth() float32 {
	if o == nil || IsNil(o.NetWorth) {
		var ret float32
		return ret
	}
	return *o.NetWorth
}

// GetNetWorthOk returns a tuple with the NetWorth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadCompanyDataTypeEcofin) GetNetWorthOk() (*float32, bool) {
	if o == nil || IsNil(o.NetWorth) {
		return nil, false
	}
	return o.NetWorth, true
}

// HasNetWorth returns a boolean if a field has been set.
func (o *DownloadCompanyDataTypeEcofin) HasNetWorth() bool {
	if o != nil && !IsNil(o.NetWorth) {
		return true
	}

	return false
}

// SetNetWorth gets a reference to the given float32 and assigns it to the NetWorth field.
func (o *DownloadCompanyDataTypeEcofin) SetNetWorth(v float32) {
	o.NetWorth = &v
}

func (o DownloadCompanyDataTypeEcofin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DownloadCompanyDataTypeEcofin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BalanceSheetDate) {
		toSerialize["balanceSheetDate"] = o.BalanceSheetDate
	}
	if !IsNil(o.TurnoverRange) {
		toSerialize["turnoverRange"] = o.TurnoverRange
	}
	if !IsNil(o.TurnoverYear) {
		toSerialize["turnoverYear"] = o.TurnoverYear
	}
	if !IsNil(o.Turnover) {
		toSerialize["turnover"] = o.Turnover
	}
	if !IsNil(o.TurnoverTrend) {
		toSerialize["turnoverTrend"] = o.TurnoverTrend
	}
	if !IsNil(o.ShareCapital) {
		toSerialize["shareCapital"] = o.ShareCapital
	}
	if !IsNil(o.NetWorth) {
		toSerialize["netWorth"] = o.NetWorth
	}
	return toSerialize, nil
}

type NullableDownloadCompanyDataTypeEcofin struct {
	value *DownloadCompanyDataTypeEcofin
	isSet bool
}

func (v NullableDownloadCompanyDataTypeEcofin) Get() *DownloadCompanyDataTypeEcofin {
	return v.value
}

func (v *NullableDownloadCompanyDataTypeEcofin) Set(val *DownloadCompanyDataTypeEcofin) {
	v.value = val
	v.isSet = true
}

func (v NullableDownloadCompanyDataTypeEcofin) IsSet() bool {
	return v.isSet
}

func (v *NullableDownloadCompanyDataTypeEcofin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDownloadCompanyDataTypeEcofin(val *DownloadCompanyDataTypeEcofin) *NullableDownloadCompanyDataTypeEcofin {
	return &NullableDownloadCompanyDataTypeEcofin{value: val, isSet: true}
}

func (v NullableDownloadCompanyDataTypeEcofin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDownloadCompanyDataTypeEcofin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


