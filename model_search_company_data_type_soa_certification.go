/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the SearchCompanyDataTypeSoaCertification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCompanyDataTypeSoaCertification{}

// SearchCompanyDataTypeSoaCertification struct for SearchCompanyDataTypeSoaCertification
type SearchCompanyDataTypeSoaCertification struct {
	HasSoaCertification *bool `json:"hasSoaCertification,omitempty"`
}

// NewSearchCompanyDataTypeSoaCertification instantiates a new SearchCompanyDataTypeSoaCertification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCompanyDataTypeSoaCertification() *SearchCompanyDataTypeSoaCertification {
	this := SearchCompanyDataTypeSoaCertification{}
	return &this
}

// NewSearchCompanyDataTypeSoaCertificationWithDefaults instantiates a new SearchCompanyDataTypeSoaCertification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCompanyDataTypeSoaCertificationWithDefaults() *SearchCompanyDataTypeSoaCertification {
	this := SearchCompanyDataTypeSoaCertification{}
	return &this
}

// GetHasSoaCertification returns the HasSoaCertification field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeSoaCertification) GetHasSoaCertification() bool {
	if o == nil || IsNil(o.HasSoaCertification) {
		var ret bool
		return ret
	}
	return *o.HasSoaCertification
}

// GetHasSoaCertificationOk returns a tuple with the HasSoaCertification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeSoaCertification) GetHasSoaCertificationOk() (*bool, bool) {
	if o == nil || IsNil(o.HasSoaCertification) {
		return nil, false
	}
	return o.HasSoaCertification, true
}

// HasHasSoaCertification returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeSoaCertification) HasHasSoaCertification() bool {
	if o != nil && !IsNil(o.HasSoaCertification) {
		return true
	}

	return false
}

// SetHasSoaCertification gets a reference to the given bool and assigns it to the HasSoaCertification field.
func (o *SearchCompanyDataTypeSoaCertification) SetHasSoaCertification(v bool) {
	o.HasSoaCertification = &v
}

func (o SearchCompanyDataTypeSoaCertification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCompanyDataTypeSoaCertification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasSoaCertification) {
		toSerialize["hasSoaCertification"] = o.HasSoaCertification
	}
	return toSerialize, nil
}

type NullableSearchCompanyDataTypeSoaCertification struct {
	value *SearchCompanyDataTypeSoaCertification
	isSet bool
}

func (v NullableSearchCompanyDataTypeSoaCertification) Get() *SearchCompanyDataTypeSoaCertification {
	return v.value
}

func (v *NullableSearchCompanyDataTypeSoaCertification) Set(val *SearchCompanyDataTypeSoaCertification) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCompanyDataTypeSoaCertification) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCompanyDataTypeSoaCertification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCompanyDataTypeSoaCertification(val *SearchCompanyDataTypeSoaCertification) *NullableSearchCompanyDataTypeSoaCertification {
	return &NullableSearchCompanyDataTypeSoaCertification{value: val, isSet: true}
}

func (v NullableSearchCompanyDataTypeSoaCertification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCompanyDataTypeSoaCertification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


