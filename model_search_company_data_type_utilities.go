/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the SearchCompanyDataTypeUtilities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCompanyDataTypeUtilities{}

// SearchCompanyDataTypeUtilities struct for SearchCompanyDataTypeUtilities
type SearchCompanyDataTypeUtilities struct {
	ElectricityScore *SearchCompanyDataTypeUtilitiesElectricityScore `json:"electricityScore,omitempty"`
	GasScore *SearchCompanyDataTypeUtilitiesGasScore `json:"gasScore,omitempty"`
}

// NewSearchCompanyDataTypeUtilities instantiates a new SearchCompanyDataTypeUtilities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCompanyDataTypeUtilities() *SearchCompanyDataTypeUtilities {
	this := SearchCompanyDataTypeUtilities{}
	return &this
}

// NewSearchCompanyDataTypeUtilitiesWithDefaults instantiates a new SearchCompanyDataTypeUtilities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCompanyDataTypeUtilitiesWithDefaults() *SearchCompanyDataTypeUtilities {
	this := SearchCompanyDataTypeUtilities{}
	return &this
}

// GetElectricityScore returns the ElectricityScore field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeUtilities) GetElectricityScore() SearchCompanyDataTypeUtilitiesElectricityScore {
	if o == nil || IsNil(o.ElectricityScore) {
		var ret SearchCompanyDataTypeUtilitiesElectricityScore
		return ret
	}
	return *o.ElectricityScore
}

// GetElectricityScoreOk returns a tuple with the ElectricityScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeUtilities) GetElectricityScoreOk() (*SearchCompanyDataTypeUtilitiesElectricityScore, bool) {
	if o == nil || IsNil(o.ElectricityScore) {
		return nil, false
	}
	return o.ElectricityScore, true
}

// HasElectricityScore returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeUtilities) HasElectricityScore() bool {
	if o != nil && !IsNil(o.ElectricityScore) {
		return true
	}

	return false
}

// SetElectricityScore gets a reference to the given SearchCompanyDataTypeUtilitiesElectricityScore and assigns it to the ElectricityScore field.
func (o *SearchCompanyDataTypeUtilities) SetElectricityScore(v SearchCompanyDataTypeUtilitiesElectricityScore) {
	o.ElectricityScore = &v
}

// GetGasScore returns the GasScore field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeUtilities) GetGasScore() SearchCompanyDataTypeUtilitiesGasScore {
	if o == nil || IsNil(o.GasScore) {
		var ret SearchCompanyDataTypeUtilitiesGasScore
		return ret
	}
	return *o.GasScore
}

// GetGasScoreOk returns a tuple with the GasScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeUtilities) GetGasScoreOk() (*SearchCompanyDataTypeUtilitiesGasScore, bool) {
	if o == nil || IsNil(o.GasScore) {
		return nil, false
	}
	return o.GasScore, true
}

// HasGasScore returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeUtilities) HasGasScore() bool {
	if o != nil && !IsNil(o.GasScore) {
		return true
	}

	return false
}

// SetGasScore gets a reference to the given SearchCompanyDataTypeUtilitiesGasScore and assigns it to the GasScore field.
func (o *SearchCompanyDataTypeUtilities) SetGasScore(v SearchCompanyDataTypeUtilitiesGasScore) {
	o.GasScore = &v
}

func (o SearchCompanyDataTypeUtilities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCompanyDataTypeUtilities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ElectricityScore) {
		toSerialize["electricityScore"] = o.ElectricityScore
	}
	if !IsNil(o.GasScore) {
		toSerialize["gasScore"] = o.GasScore
	}
	return toSerialize, nil
}

type NullableSearchCompanyDataTypeUtilities struct {
	value *SearchCompanyDataTypeUtilities
	isSet bool
}

func (v NullableSearchCompanyDataTypeUtilities) Get() *SearchCompanyDataTypeUtilities {
	return v.value
}

func (v *NullableSearchCompanyDataTypeUtilities) Set(val *SearchCompanyDataTypeUtilities) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCompanyDataTypeUtilities) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCompanyDataTypeUtilities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCompanyDataTypeUtilities(val *SearchCompanyDataTypeUtilities) *NullableSearchCompanyDataTypeUtilities {
	return &NullableSearchCompanyDataTypeUtilities{value: val, isSet: true}
}

func (v NullableSearchCompanyDataTypeUtilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCompanyDataTypeUtilities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


