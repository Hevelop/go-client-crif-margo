/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the SearchCompanyDataTypeCorporateGroupsNationalParentCompany type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCompanyDataTypeCorporateGroupsNationalParentCompany{}

// SearchCompanyDataTypeCorporateGroupsNationalParentCompany struct for SearchCompanyDataTypeCorporateGroupsNationalParentCompany
type SearchCompanyDataTypeCorporateGroupsNationalParentCompany struct {
	CompanyName *string `json:"companyName,omitempty"`
	StreetName *string `json:"streetName,omitempty"`
	Town *string `json:"town,omitempty"`
	ZipCode *string `json:"zipCode,omitempty"`
	Province *SearchCompanyDataTypeCorporateGroupsNationalParentCompanyProvince `json:"province,omitempty"`
	Country *SearchCompanyDataTypeCorporateGroupsNationalParentCompanyCountry `json:"country,omitempty"`
}

// NewSearchCompanyDataTypeCorporateGroupsNationalParentCompany instantiates a new SearchCompanyDataTypeCorporateGroupsNationalParentCompany object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCompanyDataTypeCorporateGroupsNationalParentCompany() *SearchCompanyDataTypeCorporateGroupsNationalParentCompany {
	this := SearchCompanyDataTypeCorporateGroupsNationalParentCompany{}
	return &this
}

// NewSearchCompanyDataTypeCorporateGroupsNationalParentCompanyWithDefaults instantiates a new SearchCompanyDataTypeCorporateGroupsNationalParentCompany object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCompanyDataTypeCorporateGroupsNationalParentCompanyWithDefaults() *SearchCompanyDataTypeCorporateGroupsNationalParentCompany {
	this := SearchCompanyDataTypeCorporateGroupsNationalParentCompany{}
	return &this
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetStreetName returns the StreetName field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) GetStreetName() string {
	if o == nil || IsNil(o.StreetName) {
		var ret string
		return ret
	}
	return *o.StreetName
}

// GetStreetNameOk returns a tuple with the StreetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) GetStreetNameOk() (*string, bool) {
	if o == nil || IsNil(o.StreetName) {
		return nil, false
	}
	return o.StreetName, true
}

// HasStreetName returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) HasStreetName() bool {
	if o != nil && !IsNil(o.StreetName) {
		return true
	}

	return false
}

// SetStreetName gets a reference to the given string and assigns it to the StreetName field.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) SetStreetName(v string) {
	o.StreetName = &v
}

// GetTown returns the Town field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) GetTown() string {
	if o == nil || IsNil(o.Town) {
		var ret string
		return ret
	}
	return *o.Town
}

// GetTownOk returns a tuple with the Town field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) GetTownOk() (*string, bool) {
	if o == nil || IsNil(o.Town) {
		return nil, false
	}
	return o.Town, true
}

// HasTown returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) HasTown() bool {
	if o != nil && !IsNil(o.Town) {
		return true
	}

	return false
}

// SetTown gets a reference to the given string and assigns it to the Town field.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) SetTown(v string) {
	o.Town = &v
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) GetZipCode() string {
	if o == nil || IsNil(o.ZipCode) {
		var ret string
		return ret
	}
	return *o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) GetZipCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ZipCode) {
		return nil, false
	}
	return o.ZipCode, true
}

// HasZipCode returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) HasZipCode() bool {
	if o != nil && !IsNil(o.ZipCode) {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given string and assigns it to the ZipCode field.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) SetZipCode(v string) {
	o.ZipCode = &v
}

// GetProvince returns the Province field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) GetProvince() SearchCompanyDataTypeCorporateGroupsNationalParentCompanyProvince {
	if o == nil || IsNil(o.Province) {
		var ret SearchCompanyDataTypeCorporateGroupsNationalParentCompanyProvince
		return ret
	}
	return *o.Province
}

// GetProvinceOk returns a tuple with the Province field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) GetProvinceOk() (*SearchCompanyDataTypeCorporateGroupsNationalParentCompanyProvince, bool) {
	if o == nil || IsNil(o.Province) {
		return nil, false
	}
	return o.Province, true
}

// HasProvince returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) HasProvince() bool {
	if o != nil && !IsNil(o.Province) {
		return true
	}

	return false
}

// SetProvince gets a reference to the given SearchCompanyDataTypeCorporateGroupsNationalParentCompanyProvince and assigns it to the Province field.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) SetProvince(v SearchCompanyDataTypeCorporateGroupsNationalParentCompanyProvince) {
	o.Province = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) GetCountry() SearchCompanyDataTypeCorporateGroupsNationalParentCompanyCountry {
	if o == nil || IsNil(o.Country) {
		var ret SearchCompanyDataTypeCorporateGroupsNationalParentCompanyCountry
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) GetCountryOk() (*SearchCompanyDataTypeCorporateGroupsNationalParentCompanyCountry, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given SearchCompanyDataTypeCorporateGroupsNationalParentCompanyCountry and assigns it to the Country field.
func (o *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) SetCountry(v SearchCompanyDataTypeCorporateGroupsNationalParentCompanyCountry) {
	o.Country = &v
}

func (o SearchCompanyDataTypeCorporateGroupsNationalParentCompany) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCompanyDataTypeCorporateGroupsNationalParentCompany) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompanyName) {
		toSerialize["companyName"] = o.CompanyName
	}
	if !IsNil(o.StreetName) {
		toSerialize["streetName"] = o.StreetName
	}
	if !IsNil(o.Town) {
		toSerialize["town"] = o.Town
	}
	if !IsNil(o.ZipCode) {
		toSerialize["zipCode"] = o.ZipCode
	}
	if !IsNil(o.Province) {
		toSerialize["province"] = o.Province
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	return toSerialize, nil
}

type NullableSearchCompanyDataTypeCorporateGroupsNationalParentCompany struct {
	value *SearchCompanyDataTypeCorporateGroupsNationalParentCompany
	isSet bool
}

func (v NullableSearchCompanyDataTypeCorporateGroupsNationalParentCompany) Get() *SearchCompanyDataTypeCorporateGroupsNationalParentCompany {
	return v.value
}

func (v *NullableSearchCompanyDataTypeCorporateGroupsNationalParentCompany) Set(val *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCompanyDataTypeCorporateGroupsNationalParentCompany) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCompanyDataTypeCorporateGroupsNationalParentCompany) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCompanyDataTypeCorporateGroupsNationalParentCompany(val *SearchCompanyDataTypeCorporateGroupsNationalParentCompany) *NullableSearchCompanyDataTypeCorporateGroupsNationalParentCompany {
	return &NullableSearchCompanyDataTypeCorporateGroupsNationalParentCompany{value: val, isSet: true}
}

func (v NullableSearchCompanyDataTypeCorporateGroupsNationalParentCompany) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCompanyDataTypeCorporateGroupsNationalParentCompany) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


