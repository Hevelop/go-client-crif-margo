/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the OfficeArrayType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfficeArrayType{}

// OfficeArrayType Array of Office
type OfficeArrayType struct {
	Content []OfficeType `json:"content,omitempty"`
}

// NewOfficeArrayType instantiates a new OfficeArrayType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfficeArrayType() *OfficeArrayType {
	this := OfficeArrayType{}
	return &this
}

// NewOfficeArrayTypeWithDefaults instantiates a new OfficeArrayType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfficeArrayTypeWithDefaults() *OfficeArrayType {
	this := OfficeArrayType{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *OfficeArrayType) GetContent() []OfficeType {
	if o == nil || IsNil(o.Content) {
		var ret []OfficeType
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfficeArrayType) GetContentOk() ([]OfficeType, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *OfficeArrayType) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given []OfficeType and assigns it to the Content field.
func (o *OfficeArrayType) SetContent(v []OfficeType) {
	o.Content = v
}

func (o OfficeArrayType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfficeArrayType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

type NullableOfficeArrayType struct {
	value *OfficeArrayType
	isSet bool
}

func (v NullableOfficeArrayType) Get() *OfficeArrayType {
	return v.value
}

func (v *NullableOfficeArrayType) Set(val *OfficeArrayType) {
	v.value = val
	v.isSet = true
}

func (v NullableOfficeArrayType) IsSet() bool {
	return v.isSet
}

func (v *NullableOfficeArrayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfficeArrayType(val *OfficeArrayType) *NullableOfficeArrayType {
	return &NullableOfficeArrayType{value: val, isSet: true}
}

func (v NullableOfficeArrayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfficeArrayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


