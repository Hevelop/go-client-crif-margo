/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the SearchCompanyDataTypeBranches type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCompanyDataTypeBranches{}

// SearchCompanyDataTypeBranches struct for SearchCompanyDataTypeBranches
type SearchCompanyDataTypeBranches struct {
	NumberOfBranches *float32 `json:"numberOfBranches,omitempty"`
	BrancheType *SearchCompanyDataTypeBranchesBrancheType `json:"brancheType,omitempty"`
}

// NewSearchCompanyDataTypeBranches instantiates a new SearchCompanyDataTypeBranches object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCompanyDataTypeBranches() *SearchCompanyDataTypeBranches {
	this := SearchCompanyDataTypeBranches{}
	return &this
}

// NewSearchCompanyDataTypeBranchesWithDefaults instantiates a new SearchCompanyDataTypeBranches object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCompanyDataTypeBranchesWithDefaults() *SearchCompanyDataTypeBranches {
	this := SearchCompanyDataTypeBranches{}
	return &this
}

// GetNumberOfBranches returns the NumberOfBranches field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeBranches) GetNumberOfBranches() float32 {
	if o == nil || IsNil(o.NumberOfBranches) {
		var ret float32
		return ret
	}
	return *o.NumberOfBranches
}

// GetNumberOfBranchesOk returns a tuple with the NumberOfBranches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeBranches) GetNumberOfBranchesOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberOfBranches) {
		return nil, false
	}
	return o.NumberOfBranches, true
}

// HasNumberOfBranches returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeBranches) HasNumberOfBranches() bool {
	if o != nil && !IsNil(o.NumberOfBranches) {
		return true
	}

	return false
}

// SetNumberOfBranches gets a reference to the given float32 and assigns it to the NumberOfBranches field.
func (o *SearchCompanyDataTypeBranches) SetNumberOfBranches(v float32) {
	o.NumberOfBranches = &v
}

// GetBrancheType returns the BrancheType field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeBranches) GetBrancheType() SearchCompanyDataTypeBranchesBrancheType {
	if o == nil || IsNil(o.BrancheType) {
		var ret SearchCompanyDataTypeBranchesBrancheType
		return ret
	}
	return *o.BrancheType
}

// GetBrancheTypeOk returns a tuple with the BrancheType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeBranches) GetBrancheTypeOk() (*SearchCompanyDataTypeBranchesBrancheType, bool) {
	if o == nil || IsNil(o.BrancheType) {
		return nil, false
	}
	return o.BrancheType, true
}

// HasBrancheType returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeBranches) HasBrancheType() bool {
	if o != nil && !IsNil(o.BrancheType) {
		return true
	}

	return false
}

// SetBrancheType gets a reference to the given SearchCompanyDataTypeBranchesBrancheType and assigns it to the BrancheType field.
func (o *SearchCompanyDataTypeBranches) SetBrancheType(v SearchCompanyDataTypeBranchesBrancheType) {
	o.BrancheType = &v
}

func (o SearchCompanyDataTypeBranches) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCompanyDataTypeBranches) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NumberOfBranches) {
		toSerialize["numberOfBranches"] = o.NumberOfBranches
	}
	if !IsNil(o.BrancheType) {
		toSerialize["brancheType"] = o.BrancheType
	}
	return toSerialize, nil
}

type NullableSearchCompanyDataTypeBranches struct {
	value *SearchCompanyDataTypeBranches
	isSet bool
}

func (v NullableSearchCompanyDataTypeBranches) Get() *SearchCompanyDataTypeBranches {
	return v.value
}

func (v *NullableSearchCompanyDataTypeBranches) Set(val *SearchCompanyDataTypeBranches) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCompanyDataTypeBranches) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCompanyDataTypeBranches) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCompanyDataTypeBranches(val *SearchCompanyDataTypeBranches) *NullableSearchCompanyDataTypeBranches {
	return &NullableSearchCompanyDataTypeBranches{value: val, isSet: true}
}

func (v NullableSearchCompanyDataTypeBranches) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCompanyDataTypeBranches) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


