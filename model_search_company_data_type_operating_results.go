/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the SearchCompanyDataTypeOperatingResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCompanyDataTypeOperatingResults{}

// SearchCompanyDataTypeOperatingResults struct for SearchCompanyDataTypeOperatingResults
type SearchCompanyDataTypeOperatingResults struct {
	Ebitda *float32 `json:"ebitda,omitempty"`
	EbitdaL2Y *float32 `json:"ebitdaL2Y,omitempty"`
	Ebit *float32 `json:"ebit,omitempty"`
	EbitL2Y *float32 `json:"ebitL2Y,omitempty"`
	CashFlow *float32 `json:"cashFlow,omitempty"`
	CashFlowL2Y *float32 `json:"cashFlowL2Y,omitempty"`
}

// NewSearchCompanyDataTypeOperatingResults instantiates a new SearchCompanyDataTypeOperatingResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCompanyDataTypeOperatingResults() *SearchCompanyDataTypeOperatingResults {
	this := SearchCompanyDataTypeOperatingResults{}
	return &this
}

// NewSearchCompanyDataTypeOperatingResultsWithDefaults instantiates a new SearchCompanyDataTypeOperatingResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCompanyDataTypeOperatingResultsWithDefaults() *SearchCompanyDataTypeOperatingResults {
	this := SearchCompanyDataTypeOperatingResults{}
	return &this
}

// GetEbitda returns the Ebitda field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeOperatingResults) GetEbitda() float32 {
	if o == nil || IsNil(o.Ebitda) {
		var ret float32
		return ret
	}
	return *o.Ebitda
}

// GetEbitdaOk returns a tuple with the Ebitda field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeOperatingResults) GetEbitdaOk() (*float32, bool) {
	if o == nil || IsNil(o.Ebitda) {
		return nil, false
	}
	return o.Ebitda, true
}

// HasEbitda returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeOperatingResults) HasEbitda() bool {
	if o != nil && !IsNil(o.Ebitda) {
		return true
	}

	return false
}

// SetEbitda gets a reference to the given float32 and assigns it to the Ebitda field.
func (o *SearchCompanyDataTypeOperatingResults) SetEbitda(v float32) {
	o.Ebitda = &v
}

// GetEbitdaL2Y returns the EbitdaL2Y field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeOperatingResults) GetEbitdaL2Y() float32 {
	if o == nil || IsNil(o.EbitdaL2Y) {
		var ret float32
		return ret
	}
	return *o.EbitdaL2Y
}

// GetEbitdaL2YOk returns a tuple with the EbitdaL2Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeOperatingResults) GetEbitdaL2YOk() (*float32, bool) {
	if o == nil || IsNil(o.EbitdaL2Y) {
		return nil, false
	}
	return o.EbitdaL2Y, true
}

// HasEbitdaL2Y returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeOperatingResults) HasEbitdaL2Y() bool {
	if o != nil && !IsNil(o.EbitdaL2Y) {
		return true
	}

	return false
}

// SetEbitdaL2Y gets a reference to the given float32 and assigns it to the EbitdaL2Y field.
func (o *SearchCompanyDataTypeOperatingResults) SetEbitdaL2Y(v float32) {
	o.EbitdaL2Y = &v
}

// GetEbit returns the Ebit field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeOperatingResults) GetEbit() float32 {
	if o == nil || IsNil(o.Ebit) {
		var ret float32
		return ret
	}
	return *o.Ebit
}

// GetEbitOk returns a tuple with the Ebit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeOperatingResults) GetEbitOk() (*float32, bool) {
	if o == nil || IsNil(o.Ebit) {
		return nil, false
	}
	return o.Ebit, true
}

// HasEbit returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeOperatingResults) HasEbit() bool {
	if o != nil && !IsNil(o.Ebit) {
		return true
	}

	return false
}

// SetEbit gets a reference to the given float32 and assigns it to the Ebit field.
func (o *SearchCompanyDataTypeOperatingResults) SetEbit(v float32) {
	o.Ebit = &v
}

// GetEbitL2Y returns the EbitL2Y field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeOperatingResults) GetEbitL2Y() float32 {
	if o == nil || IsNil(o.EbitL2Y) {
		var ret float32
		return ret
	}
	return *o.EbitL2Y
}

// GetEbitL2YOk returns a tuple with the EbitL2Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeOperatingResults) GetEbitL2YOk() (*float32, bool) {
	if o == nil || IsNil(o.EbitL2Y) {
		return nil, false
	}
	return o.EbitL2Y, true
}

// HasEbitL2Y returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeOperatingResults) HasEbitL2Y() bool {
	if o != nil && !IsNil(o.EbitL2Y) {
		return true
	}

	return false
}

// SetEbitL2Y gets a reference to the given float32 and assigns it to the EbitL2Y field.
func (o *SearchCompanyDataTypeOperatingResults) SetEbitL2Y(v float32) {
	o.EbitL2Y = &v
}

// GetCashFlow returns the CashFlow field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeOperatingResults) GetCashFlow() float32 {
	if o == nil || IsNil(o.CashFlow) {
		var ret float32
		return ret
	}
	return *o.CashFlow
}

// GetCashFlowOk returns a tuple with the CashFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeOperatingResults) GetCashFlowOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlow) {
		return nil, false
	}
	return o.CashFlow, true
}

// HasCashFlow returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeOperatingResults) HasCashFlow() bool {
	if o != nil && !IsNil(o.CashFlow) {
		return true
	}

	return false
}

// SetCashFlow gets a reference to the given float32 and assigns it to the CashFlow field.
func (o *SearchCompanyDataTypeOperatingResults) SetCashFlow(v float32) {
	o.CashFlow = &v
}

// GetCashFlowL2Y returns the CashFlowL2Y field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeOperatingResults) GetCashFlowL2Y() float32 {
	if o == nil || IsNil(o.CashFlowL2Y) {
		var ret float32
		return ret
	}
	return *o.CashFlowL2Y
}

// GetCashFlowL2YOk returns a tuple with the CashFlowL2Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeOperatingResults) GetCashFlowL2YOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowL2Y) {
		return nil, false
	}
	return o.CashFlowL2Y, true
}

// HasCashFlowL2Y returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeOperatingResults) HasCashFlowL2Y() bool {
	if o != nil && !IsNil(o.CashFlowL2Y) {
		return true
	}

	return false
}

// SetCashFlowL2Y gets a reference to the given float32 and assigns it to the CashFlowL2Y field.
func (o *SearchCompanyDataTypeOperatingResults) SetCashFlowL2Y(v float32) {
	o.CashFlowL2Y = &v
}

func (o SearchCompanyDataTypeOperatingResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCompanyDataTypeOperatingResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ebitda) {
		toSerialize["ebitda"] = o.Ebitda
	}
	if !IsNil(o.EbitdaL2Y) {
		toSerialize["ebitdaL2Y"] = o.EbitdaL2Y
	}
	if !IsNil(o.Ebit) {
		toSerialize["ebit"] = o.Ebit
	}
	if !IsNil(o.EbitL2Y) {
		toSerialize["ebitL2Y"] = o.EbitL2Y
	}
	if !IsNil(o.CashFlow) {
		toSerialize["cashFlow"] = o.CashFlow
	}
	if !IsNil(o.CashFlowL2Y) {
		toSerialize["cashFlowL2Y"] = o.CashFlowL2Y
	}
	return toSerialize, nil
}

type NullableSearchCompanyDataTypeOperatingResults struct {
	value *SearchCompanyDataTypeOperatingResults
	isSet bool
}

func (v NullableSearchCompanyDataTypeOperatingResults) Get() *SearchCompanyDataTypeOperatingResults {
	return v.value
}

func (v *NullableSearchCompanyDataTypeOperatingResults) Set(val *SearchCompanyDataTypeOperatingResults) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCompanyDataTypeOperatingResults) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCompanyDataTypeOperatingResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCompanyDataTypeOperatingResults(val *SearchCompanyDataTypeOperatingResults) *NullableSearchCompanyDataTypeOperatingResults {
	return &NullableSearchCompanyDataTypeOperatingResults{value: val, isSet: true}
}

func (v NullableSearchCompanyDataTypeOperatingResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCompanyDataTypeOperatingResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


