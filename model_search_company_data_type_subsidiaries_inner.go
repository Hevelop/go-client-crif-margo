/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
)

// checks if the SearchCompanyDataTypeSubsidiariesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCompanyDataTypeSubsidiariesInner{}

// SearchCompanyDataTypeSubsidiariesInner struct for SearchCompanyDataTypeSubsidiariesInner
type SearchCompanyDataTypeSubsidiariesInner struct {
	TaxCode *string `json:"taxCode,omitempty"`
	CompanyName *string `json:"companyName,omitempty"`
	StreetName *string `json:"streetName,omitempty"`
	ZipCode *string `json:"zipCode,omitempty"`
	Town *string `json:"town,omitempty"`
	Province *SearchCompanyDataTypeSubsidiariesInnerProvince `json:"province,omitempty"`
}

// NewSearchCompanyDataTypeSubsidiariesInner instantiates a new SearchCompanyDataTypeSubsidiariesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCompanyDataTypeSubsidiariesInner() *SearchCompanyDataTypeSubsidiariesInner {
	this := SearchCompanyDataTypeSubsidiariesInner{}
	return &this
}

// NewSearchCompanyDataTypeSubsidiariesInnerWithDefaults instantiates a new SearchCompanyDataTypeSubsidiariesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCompanyDataTypeSubsidiariesInnerWithDefaults() *SearchCompanyDataTypeSubsidiariesInner {
	this := SearchCompanyDataTypeSubsidiariesInner{}
	return &this
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeSubsidiariesInner) GetTaxCode() string {
	if o == nil || IsNil(o.TaxCode) {
		var ret string
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeSubsidiariesInner) GetTaxCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeSubsidiariesInner) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given string and assigns it to the TaxCode field.
func (o *SearchCompanyDataTypeSubsidiariesInner) SetTaxCode(v string) {
	o.TaxCode = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeSubsidiariesInner) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeSubsidiariesInner) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeSubsidiariesInner) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *SearchCompanyDataTypeSubsidiariesInner) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetStreetName returns the StreetName field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeSubsidiariesInner) GetStreetName() string {
	if o == nil || IsNil(o.StreetName) {
		var ret string
		return ret
	}
	return *o.StreetName
}

// GetStreetNameOk returns a tuple with the StreetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeSubsidiariesInner) GetStreetNameOk() (*string, bool) {
	if o == nil || IsNil(o.StreetName) {
		return nil, false
	}
	return o.StreetName, true
}

// HasStreetName returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeSubsidiariesInner) HasStreetName() bool {
	if o != nil && !IsNil(o.StreetName) {
		return true
	}

	return false
}

// SetStreetName gets a reference to the given string and assigns it to the StreetName field.
func (o *SearchCompanyDataTypeSubsidiariesInner) SetStreetName(v string) {
	o.StreetName = &v
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeSubsidiariesInner) GetZipCode() string {
	if o == nil || IsNil(o.ZipCode) {
		var ret string
		return ret
	}
	return *o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeSubsidiariesInner) GetZipCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ZipCode) {
		return nil, false
	}
	return o.ZipCode, true
}

// HasZipCode returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeSubsidiariesInner) HasZipCode() bool {
	if o != nil && !IsNil(o.ZipCode) {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given string and assigns it to the ZipCode field.
func (o *SearchCompanyDataTypeSubsidiariesInner) SetZipCode(v string) {
	o.ZipCode = &v
}

// GetTown returns the Town field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeSubsidiariesInner) GetTown() string {
	if o == nil || IsNil(o.Town) {
		var ret string
		return ret
	}
	return *o.Town
}

// GetTownOk returns a tuple with the Town field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeSubsidiariesInner) GetTownOk() (*string, bool) {
	if o == nil || IsNil(o.Town) {
		return nil, false
	}
	return o.Town, true
}

// HasTown returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeSubsidiariesInner) HasTown() bool {
	if o != nil && !IsNil(o.Town) {
		return true
	}

	return false
}

// SetTown gets a reference to the given string and assigns it to the Town field.
func (o *SearchCompanyDataTypeSubsidiariesInner) SetTown(v string) {
	o.Town = &v
}

// GetProvince returns the Province field value if set, zero value otherwise.
func (o *SearchCompanyDataTypeSubsidiariesInner) GetProvince() SearchCompanyDataTypeSubsidiariesInnerProvince {
	if o == nil || IsNil(o.Province) {
		var ret SearchCompanyDataTypeSubsidiariesInnerProvince
		return ret
	}
	return *o.Province
}

// GetProvinceOk returns a tuple with the Province field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompanyDataTypeSubsidiariesInner) GetProvinceOk() (*SearchCompanyDataTypeSubsidiariesInnerProvince, bool) {
	if o == nil || IsNil(o.Province) {
		return nil, false
	}
	return o.Province, true
}

// HasProvince returns a boolean if a field has been set.
func (o *SearchCompanyDataTypeSubsidiariesInner) HasProvince() bool {
	if o != nil && !IsNil(o.Province) {
		return true
	}

	return false
}

// SetProvince gets a reference to the given SearchCompanyDataTypeSubsidiariesInnerProvince and assigns it to the Province field.
func (o *SearchCompanyDataTypeSubsidiariesInner) SetProvince(v SearchCompanyDataTypeSubsidiariesInnerProvince) {
	o.Province = &v
}

func (o SearchCompanyDataTypeSubsidiariesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCompanyDataTypeSubsidiariesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.CompanyName) {
		toSerialize["companyName"] = o.CompanyName
	}
	if !IsNil(o.StreetName) {
		toSerialize["streetName"] = o.StreetName
	}
	if !IsNil(o.ZipCode) {
		toSerialize["zipCode"] = o.ZipCode
	}
	if !IsNil(o.Town) {
		toSerialize["town"] = o.Town
	}
	if !IsNil(o.Province) {
		toSerialize["province"] = o.Province
	}
	return toSerialize, nil
}

type NullableSearchCompanyDataTypeSubsidiariesInner struct {
	value *SearchCompanyDataTypeSubsidiariesInner
	isSet bool
}

func (v NullableSearchCompanyDataTypeSubsidiariesInner) Get() *SearchCompanyDataTypeSubsidiariesInner {
	return v.value
}

func (v *NullableSearchCompanyDataTypeSubsidiariesInner) Set(val *SearchCompanyDataTypeSubsidiariesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCompanyDataTypeSubsidiariesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCompanyDataTypeSubsidiariesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCompanyDataTypeSubsidiariesInner(val *SearchCompanyDataTypeSubsidiariesInner) *NullableSearchCompanyDataTypeSubsidiariesInner {
	return &NullableSearchCompanyDataTypeSubsidiariesInner{value: val, isSet: true}
}

func (v NullableSearchCompanyDataTypeSubsidiariesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCompanyDataTypeSubsidiariesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


