/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompanyUpdateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyUpdateType{}

// CompanyUpdateType struct for CompanyUpdateType
type CompanyUpdateType struct {
	// The guid reported in this item is generated automatically by Margo system and it is the unique code that identifies the company in the portfolio.
	MargoId string `json:"margoId"`
	CompanyPortfolioStatus *string `json:"companyPortfolioStatus,omitempty"`
	// It's possible to insert one or more tag divided by comma. Max occurrence is 10 values.
	Tags *string `json:"tags,omitempty"`
	// It identifies the amount billed to the customer.
	Amount *float32 `json:"amount,omitempty"`
	// It must be an Area manager user id defined for the organization.
	AreaManagerId *string `json:"areaManagerId,omitempty"`
	// It must be a Sales user id defined for the organization.
	SalesId *string `json:"salesId,omitempty"`
	// It must be a Product Id defined for the organization.
	ProductId *string `json:"productId,omitempty"`
	// It indicates if a company has been enriched from the web users
	IsEnriched *bool `json:"isEnriched,omitempty"`
	CustomVariables []CustomVariableType `json:"customVariables,omitempty"`
}

type _CompanyUpdateType CompanyUpdateType

// NewCompanyUpdateType instantiates a new CompanyUpdateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyUpdateType(margoId string) *CompanyUpdateType {
	this := CompanyUpdateType{}
	this.MargoId = margoId
	return &this
}

// NewCompanyUpdateTypeWithDefaults instantiates a new CompanyUpdateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyUpdateTypeWithDefaults() *CompanyUpdateType {
	this := CompanyUpdateType{}
	return &this
}

// GetMargoId returns the MargoId field value
func (o *CompanyUpdateType) GetMargoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MargoId
}

// GetMargoIdOk returns a tuple with the MargoId field value
// and a boolean to check if the value has been set.
func (o *CompanyUpdateType) GetMargoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MargoId, true
}

// SetMargoId sets field value
func (o *CompanyUpdateType) SetMargoId(v string) {
	o.MargoId = v
}

// GetCompanyPortfolioStatus returns the CompanyPortfolioStatus field value if set, zero value otherwise.
func (o *CompanyUpdateType) GetCompanyPortfolioStatus() string {
	if o == nil || IsNil(o.CompanyPortfolioStatus) {
		var ret string
		return ret
	}
	return *o.CompanyPortfolioStatus
}

// GetCompanyPortfolioStatusOk returns a tuple with the CompanyPortfolioStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyUpdateType) GetCompanyPortfolioStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyPortfolioStatus) {
		return nil, false
	}
	return o.CompanyPortfolioStatus, true
}

// HasCompanyPortfolioStatus returns a boolean if a field has been set.
func (o *CompanyUpdateType) HasCompanyPortfolioStatus() bool {
	if o != nil && !IsNil(o.CompanyPortfolioStatus) {
		return true
	}

	return false
}

// SetCompanyPortfolioStatus gets a reference to the given string and assigns it to the CompanyPortfolioStatus field.
func (o *CompanyUpdateType) SetCompanyPortfolioStatus(v string) {
	o.CompanyPortfolioStatus = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CompanyUpdateType) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyUpdateType) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CompanyUpdateType) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *CompanyUpdateType) SetTags(v string) {
	o.Tags = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CompanyUpdateType) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyUpdateType) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CompanyUpdateType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *CompanyUpdateType) SetAmount(v float32) {
	o.Amount = &v
}

// GetAreaManagerId returns the AreaManagerId field value if set, zero value otherwise.
func (o *CompanyUpdateType) GetAreaManagerId() string {
	if o == nil || IsNil(o.AreaManagerId) {
		var ret string
		return ret
	}
	return *o.AreaManagerId
}

// GetAreaManagerIdOk returns a tuple with the AreaManagerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyUpdateType) GetAreaManagerIdOk() (*string, bool) {
	if o == nil || IsNil(o.AreaManagerId) {
		return nil, false
	}
	return o.AreaManagerId, true
}

// HasAreaManagerId returns a boolean if a field has been set.
func (o *CompanyUpdateType) HasAreaManagerId() bool {
	if o != nil && !IsNil(o.AreaManagerId) {
		return true
	}

	return false
}

// SetAreaManagerId gets a reference to the given string and assigns it to the AreaManagerId field.
func (o *CompanyUpdateType) SetAreaManagerId(v string) {
	o.AreaManagerId = &v
}

// GetSalesId returns the SalesId field value if set, zero value otherwise.
func (o *CompanyUpdateType) GetSalesId() string {
	if o == nil || IsNil(o.SalesId) {
		var ret string
		return ret
	}
	return *o.SalesId
}

// GetSalesIdOk returns a tuple with the SalesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyUpdateType) GetSalesIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesId) {
		return nil, false
	}
	return o.SalesId, true
}

// HasSalesId returns a boolean if a field has been set.
func (o *CompanyUpdateType) HasSalesId() bool {
	if o != nil && !IsNil(o.SalesId) {
		return true
	}

	return false
}

// SetSalesId gets a reference to the given string and assigns it to the SalesId field.
func (o *CompanyUpdateType) SetSalesId(v string) {
	o.SalesId = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *CompanyUpdateType) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyUpdateType) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *CompanyUpdateType) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *CompanyUpdateType) SetProductId(v string) {
	o.ProductId = &v
}

// GetIsEnriched returns the IsEnriched field value if set, zero value otherwise.
func (o *CompanyUpdateType) GetIsEnriched() bool {
	if o == nil || IsNil(o.IsEnriched) {
		var ret bool
		return ret
	}
	return *o.IsEnriched
}

// GetIsEnrichedOk returns a tuple with the IsEnriched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyUpdateType) GetIsEnrichedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnriched) {
		return nil, false
	}
	return o.IsEnriched, true
}

// HasIsEnriched returns a boolean if a field has been set.
func (o *CompanyUpdateType) HasIsEnriched() bool {
	if o != nil && !IsNil(o.IsEnriched) {
		return true
	}

	return false
}

// SetIsEnriched gets a reference to the given bool and assigns it to the IsEnriched field.
func (o *CompanyUpdateType) SetIsEnriched(v bool) {
	o.IsEnriched = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *CompanyUpdateType) GetCustomVariables() []CustomVariableType {
	if o == nil || IsNil(o.CustomVariables) {
		var ret []CustomVariableType
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyUpdateType) GetCustomVariablesOk() ([]CustomVariableType, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return nil, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *CompanyUpdateType) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given []CustomVariableType and assigns it to the CustomVariables field.
func (o *CompanyUpdateType) SetCustomVariables(v []CustomVariableType) {
	o.CustomVariables = v
}

func (o CompanyUpdateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyUpdateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["margoId"] = o.MargoId
	if !IsNil(o.CompanyPortfolioStatus) {
		toSerialize["companyPortfolioStatus"] = o.CompanyPortfolioStatus
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AreaManagerId) {
		toSerialize["areaManagerId"] = o.AreaManagerId
	}
	if !IsNil(o.SalesId) {
		toSerialize["salesId"] = o.SalesId
	}
	if !IsNil(o.ProductId) {
		toSerialize["productId"] = o.ProductId
	}
	if !IsNil(o.IsEnriched) {
		toSerialize["isEnriched"] = o.IsEnriched
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	return toSerialize, nil
}

func (o *CompanyUpdateType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"margoId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyUpdateType := _CompanyUpdateType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanyUpdateType)

	if err != nil {
		return err
	}

	*o = CompanyUpdateType(varCompanyUpdateType)

	return err
}

type NullableCompanyUpdateType struct {
	value *CompanyUpdateType
	isSet bool
}

func (v NullableCompanyUpdateType) Get() *CompanyUpdateType {
	return v.value
}

func (v *NullableCompanyUpdateType) Set(val *CompanyUpdateType) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyUpdateType) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyUpdateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyUpdateType(val *CompanyUpdateType) *NullableCompanyUpdateType {
	return &NullableCompanyUpdateType{value: val, isSet: true}
}

func (v NullableCompanyUpdateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyUpdateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


