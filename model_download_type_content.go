/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
	"fmt"
)

// DownloadTypeContent - struct for DownloadTypeContent
type DownloadTypeContent struct {
	DataPacketArrayType *DataPacketArrayType
	MarketingListType *MarketingListType
}

// DataPacketArrayTypeAsDownloadTypeContent is a convenience function that returns DataPacketArrayType wrapped in DownloadTypeContent
func DataPacketArrayTypeAsDownloadTypeContent(v *DataPacketArrayType) DownloadTypeContent {
	return DownloadTypeContent{
		DataPacketArrayType: v,
	}
}

// MarketingListTypeAsDownloadTypeContent is a convenience function that returns MarketingListType wrapped in DownloadTypeContent
func MarketingListTypeAsDownloadTypeContent(v *MarketingListType) DownloadTypeContent {
	return DownloadTypeContent{
		MarketingListType: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DownloadTypeContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DataPacketArrayType
	err = newStrictDecoder(data).Decode(&dst.DataPacketArrayType)
	if err == nil {
		jsonDataPacketArrayType, _ := json.Marshal(dst.DataPacketArrayType)
		if string(jsonDataPacketArrayType) == "{}" { // empty struct
			dst.DataPacketArrayType = nil
		} else {
			match++
		}
	} else {
		dst.DataPacketArrayType = nil
	}

	// try to unmarshal data into MarketingListType
	err = newStrictDecoder(data).Decode(&dst.MarketingListType)
	if err == nil {
		jsonMarketingListType, _ := json.Marshal(dst.MarketingListType)
		if string(jsonMarketingListType) == "{}" { // empty struct
			dst.MarketingListType = nil
		} else {
			match++
		}
	} else {
		dst.MarketingListType = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DataPacketArrayType = nil
		dst.MarketingListType = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DownloadTypeContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DownloadTypeContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DownloadTypeContent) MarshalJSON() ([]byte, error) {
	if src.DataPacketArrayType != nil {
		return json.Marshal(&src.DataPacketArrayType)
	}

	if src.MarketingListType != nil {
		return json.Marshal(&src.MarketingListType)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DownloadTypeContent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataPacketArrayType != nil {
		return obj.DataPacketArrayType
	}

	if obj.MarketingListType != nil {
		return obj.MarketingListType
	}

	// all schemas are nil
	return nil
}

type NullableDownloadTypeContent struct {
	value *DownloadTypeContent
	isSet bool
}

func (v NullableDownloadTypeContent) Get() *DownloadTypeContent {
	return v.value
}

func (v *NullableDownloadTypeContent) Set(val *DownloadTypeContent) {
	v.value = val
	v.isSet = true
}

func (v NullableDownloadTypeContent) IsSet() bool {
	return v.isSet
}

func (v *NullableDownloadTypeContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDownloadTypeContent(val *DownloadTypeContent) *NullableDownloadTypeContent {
	return &NullableDownloadTypeContent{value: val, isSet: true}
}

func (v NullableDownloadTypeContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDownloadTypeContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


