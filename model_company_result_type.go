/*
Global Marketing Solution

## Overview

API version: 1.0.0
Contact: PM_Margo@crif.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crifmargo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompanyResultType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyResultType{}

// CompanyResultType struct for CompanyResultType
type CompanyResultType struct {
	// The guid reported in this item is generated automatically by Margo system and it is the unique code that identifies the company in the portfolio.
	MargoId string `json:"margoId"`
	// The value reported indicates if the system accepted the company information. * Success: ok * Ceased: company is ceased and the system rejected it * Unmatched: company is not present * Invalid: company is not valid * Validated: company is formally correct * Error:  the company information contains some error. The error  details are reported in the `errors` item.
	Result string `json:"result"`
	Errors []ErrorType `json:"errors,omitempty"`
}

type _CompanyResultType CompanyResultType

// NewCompanyResultType instantiates a new CompanyResultType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyResultType(margoId string, result string) *CompanyResultType {
	this := CompanyResultType{}
	this.MargoId = margoId
	this.Result = result
	return &this
}

// NewCompanyResultTypeWithDefaults instantiates a new CompanyResultType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyResultTypeWithDefaults() *CompanyResultType {
	this := CompanyResultType{}
	return &this
}

// GetMargoId returns the MargoId field value
func (o *CompanyResultType) GetMargoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MargoId
}

// GetMargoIdOk returns a tuple with the MargoId field value
// and a boolean to check if the value has been set.
func (o *CompanyResultType) GetMargoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MargoId, true
}

// SetMargoId sets field value
func (o *CompanyResultType) SetMargoId(v string) {
	o.MargoId = v
}

// GetResult returns the Result field value
func (o *CompanyResultType) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *CompanyResultType) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *CompanyResultType) SetResult(v string) {
	o.Result = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *CompanyResultType) GetErrors() []ErrorType {
	if o == nil || IsNil(o.Errors) {
		var ret []ErrorType
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyResultType) GetErrorsOk() ([]ErrorType, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *CompanyResultType) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ErrorType and assigns it to the Errors field.
func (o *CompanyResultType) SetErrors(v []ErrorType) {
	o.Errors = v
}

func (o CompanyResultType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyResultType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["margoId"] = o.MargoId
	toSerialize["result"] = o.Result
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

func (o *CompanyResultType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"margoId",
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyResultType := _CompanyResultType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanyResultType)

	if err != nil {
		return err
	}

	*o = CompanyResultType(varCompanyResultType)

	return err
}

type NullableCompanyResultType struct {
	value *CompanyResultType
	isSet bool
}

func (v NullableCompanyResultType) Get() *CompanyResultType {
	return v.value
}

func (v *NullableCompanyResultType) Set(val *CompanyResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyResultType(val *CompanyResultType) *NullableCompanyResultType {
	return &NullableCompanyResultType{value: val, isSet: true}
}

func (v NullableCompanyResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


